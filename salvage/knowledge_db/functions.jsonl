{"id": "49776437b0197373", "name": "test_residuals_calculation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\test_cpp_cfd.py", "quality": 118, "cfd_tags": ["boundary", "cfd", "pressure", "residual", "timestep", "velocity"], "parameters": [], "complexity": 5, "length": 39, "snippet": "def test_residuals_calculation():\n    \"\"\"Test the C++ residuals calculation function\"\"\"\n    print(\"\\n--- Testing C++ Residuals Calculation ---\")\n    \n    # Create a grid\n    n = 65  # Grid size\n    \n    # Create velocity fields\n    u_prev = np.random.rand(n, n) * 0.1  # Previous velocity\n    v_prev = np.random.rand(n, n) * 0.1\n    \n    # Create slightly different current velocity fields (simulating a timestep)\n    u = u_prev + np.random.rand(n, n) * 0.01\n    v = v_prev + np.random.rand(n, n) * 0.01\n    \n    # Set boundary conditions\n    u[0, :] = 0.0  # Bottom\n    u[-1, :] = 1.0  # Top (lid)\n    u[:, 0] = u[:, -1] = 0.0  # Left and right\n    \n    v[0, :] = v[-1, :] = 0.0  # Bottom and top\n    v[:, 0] = v[:, -1] = 0.0  # Left and right\n    \n    # Create a pressure field\n    p = np.zeros((n, n))\n    \n    # Calculate residuals using the C++ function\n    print(\"Calculating residuals with C++ function...\")\n    start_time = time.time()\n    residuals = pyflow_core_cfd.calculate_residuals(u, v, u_prev, v_prev, p)\n    cpp_time = time.time() - start_time\n    print(f\"C++ residuals calculation time: {cpp_time:.3f} seconds\")\n    \n    # Print the residuals\n    print(f\"u-momentum residual: {residuals['u_res']:.8f}\")\n    print(f\"v-momentum residual: {residuals['v_res']:.8f}\")\n    print(f\"continuity residual: {residuals['cont_res']:.8f}\")\n    \n    return residuals, cpp_time"}
{"id": "348a8ca302254cd1", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 116, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["u", "v", "p", "grid", "title"], "complexity": 3, "length": 35, "snippet": "def plot_results(u, v, p, grid, title=\"Converged Solution\"):\n    \"\"\"Visualizes the final flow field.\"\"\"\n    # Interpolate velocities to cell centers for visualization\n    u_c = 0.5 * (u[:, :-1] + u[:, 1:])\n    v_c = 0.5 * (v[:-1, :] + v[1:, :])\n\n    X_p, Y_p = np.meshgrid(grid['x_p'], grid['y_p'])\n\n    plt.style.use('default')\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n    fig.suptitle(title, fontsize=16)\n\n    # Velocity Streamlines\n    velocity_mag = np.sqrt(u_c**2 + v_c**2)\n    strm = ax1.streamplot(X_p, Y_p, u_c, v_c, color=velocity_mag, cmap='viridis', density=1.5)\n    fig.colorbar(strm.lines, ax=ax1, label='Velocity Magnitude')\n    ax1.set_title('Velocity Streamlines')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('y')\n    ax1.set_xlim(0, grid['Lx'])\n    ax1.set_ylim(0, grid['Ly'])\n    ax1.set_aspect('equal', adjustable='box')\n\n    # Pressure Contours\n    contour = ax2.contourf(X_p, Y_p, p, levels=50, cmap='viridis')\n    fig.colorbar(contour, ax=ax2, label='Pressure')\n    ax2.set_title('Pressure Contours')\n    ax2.set_xlabel('x')\n    ax2.set_ylabel('y')\n    ax2.set_xlim(0, grid['Lx'])\n    ax2.set_ylim(0, grid['Ly'])\n    ax2.set_aspect('equal', adjustable='box')\n\n    plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n    plt.show()"}
{"id": "26aa71717faeff6d", "name": "_run_validation_solver", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_validation.py", "quality": 116, "cfd_tags": ["residual", "solver", "velocity"], "parameters": ["N", "Re", "T"], "complexity": 4, "length": 14, "snippet": "def _run_validation_solver(N, Re, T):\n    \"\"\"Helper to run a longer, higher-res validation case safely.\"\"\"\n    u_res, v_res, p_res, residuals = None, None, None, None\n    try:\n        u_res, v_res, p_res, residuals = solve_lid_driven_cavity(\n            N=N, Re=Re, dt=0.001, T=T, p_iterations=50\n        )\n    except Exception as e:\n        pytest.fail(f\"Solver crashed during validation run: {e}\")\n\n    if u_res is None or np.isnan(u_res).any():\n        pytest.fail(\"Solver produced NaN in u-velocity during validation.\")\n\n    return u_res, v_res, p_res"}
{"id": "81ff8fd1b94c9649", "name": "create_staggered_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 114, "cfd_tags": ["pressure", "velocity"], "parameters": ["cfg"], "complexity": 1, "length": 25, "snippet": "def create_staggered_grid(cfg):\n    \"\"\"Creates a structured, staggered grid.\"\"\"\n    grid_cfg = cfg['grid']\n    grid = {\n        'Nx': grid_cfg['Nx'], 'Ny': grid_cfg['Ny'],\n        'Lx': grid_cfg['Lx'], 'Ly': grid_cfg['Ly']\n    }\n    # Cell dimensions\n    grid['dx'] = grid['Lx'] / (grid['Nx'] - 1)\n    grid['dy'] = grid['Ly'] / (grid['Ny'] - 1)\n\n    # Pressure nodes (cell centers)\n    grid['x_p'] = np.linspace(grid['dx']/2, grid['Lx'] - grid['dx']/2, grid['Nx'] - 1)\n    grid['y_p'] = np.linspace(grid['dy']/2, grid['Ly'] - grid['dy']/2, grid['Ny'] - 1)\n\n    # U-velocity nodes (vertical faces)\n    grid['x_u'] = np.linspace(0, grid['Lx'], grid['Nx'])\n    grid['y_u'] = np.linspace(grid['dy']/2, grid['Ly'] - grid['dy']/2, grid['Ny'] - 1)\n\n    # V-velocity nodes (horizontal faces)\n    grid['x_v'] = np.linspace(grid['dx']/2, grid['Lx'] - grid['dx']/2, grid['Nx'] - 1)\n    grid['y_v'] = np.linspace(0, grid['Ly'], grid['Ny'])\n\n    print(f\"Grid created: {grid['Nx']-1}x{grid['Ny']-1} cells.\")\n    return grid"}
{"id": "8043eb016cdea9cf", "name": "test_quick_benchmark_re400", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_benchmark_quick.py", "quality": 114, "cfd_tags": ["boundary", "pressure", "residual", "solver", "velocity"], "parameters": ["capsys"], "complexity": 8, "length": 34, "snippet": "def test_quick_benchmark_re400(capsys):\n    \"\"\"\n    Test that the solver works properly at Re=400, but without expecting\n    full convergence to benchmark data (which would take longer).\n    This is just a quick verification that the solver runs without errors.\n    \"\"\"\n    Re = 400\n    NPOINTS, T, dt = 33, 0.5, 0.001  # Very short simulation time for testing\n    L = 1.0\n    grid = Grid(NPOINTS, L)\n    logger = LiveLogger(NPOINTS, Re, dt, T, log_interval=500)\n    \n    with capsys.disabled():\n        u, v, p, residuals = solve_lid_driven_cavity(\n            grid.NPOINTS, grid.dx, grid.dy, Re, dt, T,\n            p_iterations=50,  # Minimal pressure iterations for testing\n            logger=logger\n        )\n    \n    # Just check that the solver ran and produced reasonable results\n    assert np.all(np.isfinite(u)), \"Solver produced non-finite values in u\"\n    assert np.all(np.isfinite(v)), \"Solver produced non-finite values in v\"\n    assert np.all(np.isfinite(p)), \"Solver produced non-finite values in p\"\n    \n    # Check boundary conditions\n    assert np.allclose(u[-1,1:-1], 1.0), \"Lid velocity not properly set\"\n    assert np.allclose(u[0,:], 0.0), \"Bottom wall velocity not zero\"\n    \n    # Check that some flow develops in the domain\n    assert np.max(np.abs(u[1:-1,1:-1])) > 0.01, \"No significant flow developed\"\n    assert np.max(np.abs(v[1:-1,1:-1])) > 0.001, \"No significant flow developed\"\n    \n    # Check if there's some non-zero pressure gradient\n    assert np.max(p) - np.min(p) > 0.01, \"No significant pressure gradient developed\""}
{"id": "fb14e14c3ddd4e45", "name": "get_eos", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["self", "rho_geom"], "complexity": 5, "length": 16, "snippet": "    def get_eos(self, rho_geom):\n        \"\"\"\n        Calculates the pressure and energy density for a given baryonic density.\n        \"\"\"\n        f = self._blending_function(rho_geom)\n        p_sly4 = self._sly4_eos_only(rho_geom)\n        p_finitude = self._finitude_eos_only(rho_geom)\n        pressure_geom = (1 - f) * p_sly4 + f * p_finitude\n\n        gamma_sly4_for_interp = self.gamma_vals_sly4[:-1]\n        gamma_interp = np.interp(rho_geom, self.rho_divs_geom_sly4, gamma_sly4_for_interp)\n        gamma_eff = (1 - f) * gamma_interp + f * self.GAMMA_FINITUDE\n\n        internal_energy = pressure_geom / (gamma_eff - 1.0) if gamma_eff != 1.0 else 0.0\n        energy_density_geom = rho_geom + internal_energy\n        return pressure_geom, energy_density_geom"}
{"id": "ca2d641156a3521d", "name": "get_eos", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\cpsail_finitude_14.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["self", "rho_geom"], "complexity": 5, "length": 16, "snippet": "    def get_eos(self, rho_geom):\n        \"\"\"\n        Calculates the pressure and energy density for a given baryonic density.\n        \"\"\"\n        f = self._blending_function(rho_geom)\n        p_sly4 = self._sly4_eos_only(rho_geom)\n        p_finitude = self._finitude_eos_only(rho_geom)\n        pressure_geom = (1 - f) * p_sly4 + f * p_finitude\n\n        gamma_sly4_for_interp = self.gamma_vals_sly4[:-1]\n        gamma_interp = np.interp(rho_geom, self.rho_divs_geom_sly4, gamma_sly4_for_interp)\n        gamma_eff = (1 - f) * gamma_interp + f * self.GAMMA_FINITUDE\n\n        internal_energy = pressure_geom / (gamma_eff - 1.0) if gamma_eff != 1.0 else 0.0\n        energy_density_geom = rho_geom + internal_energy\n        return pressure_geom, energy_density_geom"}
{"id": "5a0a53061781a8b6", "name": "get_eos", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12 (1).py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["self", "rho_geom"], "complexity": 5, "length": 16, "snippet": "    def get_eos(self, rho_geom):\n        \"\"\"\n        Calculates the pressure and energy density for a given baryonic density.\n        \"\"\"\n        f = self._blending_function(rho_geom)\n        p_sly4 = self._sly4_eos_only(rho_geom)\n        p_finitude = self._finitude_eos_only(rho_geom)\n        pressure_geom = (1 - f) * p_sly4 + f * p_finitude\n\n        gamma_sly4_for_interp = self.gamma_vals_sly4[:-1]\n        gamma_interp = np.interp(rho_geom, self.rho_divs_geom_sly4, gamma_sly4_for_interp)\n        gamma_eff = (1 - f) * gamma_interp + f * self.GAMMA_FINITUDE\n\n        internal_energy = pressure_geom / (gamma_eff - 1.0) if gamma_eff != 1.0 else 0.0\n        energy_density_geom = rho_geom + internal_energy\n        return pressure_geom, energy_density_geom"}
{"id": "812cd0a65bd96035", "name": "get_eos", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["self", "rho_geom"], "complexity": 5, "length": 16, "snippet": "    def get_eos(self, rho_geom):\n        \"\"\"\n        Calculates the pressure and energy density for a given baryonic density.\n        \"\"\"\n        f = self._blending_function(rho_geom)\n        p_sly4 = self._sly4_eos_only(rho_geom)\n        p_finitude = self._finitude_eos_only(rho_geom)\n        pressure_geom = (1 - f) * p_sly4 + f * p_finitude\n\n        gamma_sly4_for_interp = self.gamma_vals_sly4[:-1]\n        gamma_interp = np.interp(rho_geom, self.rho_divs_geom_sly4, gamma_sly4_for_interp)\n        gamma_eff = (1 - f) * gamma_interp + f * self.GAMMA_FINITUDE\n\n        internal_energy = pressure_geom / (gamma_eff - 1.0) if gamma_eff != 1.0 else 0.0\n        energy_density_geom = rho_geom + internal_energy\n        return pressure_geom, energy_density_geom"}
{"id": "10aa4ca7c33819e5", "name": "get_eos", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12 (1).py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["self", "rho_geom"], "complexity": 5, "length": 16, "snippet": "    def get_eos(self, rho_geom):\n        \"\"\"\n        Calculates the pressure and energy density for a given baryonic density.\n        \"\"\"\n        f = self._blending_function(rho_geom)\n        p_sly4 = self._sly4_eos_only(rho_geom)\n        p_finitude = self._finitude_eos_only(rho_geom)\n        pressure_geom = (1 - f) * p_sly4 + f * p_finitude\n\n        gamma_sly4_for_interp = self.gamma_vals_sly4[:-1]\n        gamma_interp = np.interp(rho_geom, self.rho_divs_geom_sly4, gamma_sly4_for_interp)\n        gamma_eff = (1 - f) * gamma_interp + f * self.GAMMA_FINITUDE\n\n        internal_energy = pressure_geom / (gamma_eff - 1.0) if gamma_eff != 1.0 else 0.0\n        energy_density_geom = rho_geom + internal_energy\n        return pressure_geom, energy_density_geom"}
{"id": "00c8ba8ddf0128a4", "name": "get_eos", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["self", "rho_geom"], "complexity": 5, "length": 16, "snippet": "    def get_eos(self, rho_geom):\n        \"\"\"\n        Calculates the pressure and energy density for a given baryonic density.\n        \"\"\"\n        f = self._blending_function(rho_geom)\n        p_sly4 = self._sly4_eos_only(rho_geom)\n        p_finitude = self._finitude_eos_only(rho_geom)\n        pressure_geom = (1 - f) * p_sly4 + f * p_finitude\n\n        gamma_sly4_for_interp = self.gamma_vals_sly4[:-1]\n        gamma_interp = np.interp(rho_geom, self.rho_divs_geom_sly4, gamma_sly4_for_interp)\n        gamma_eff = (1 - f) * gamma_interp + f * self.GAMMA_FINITUDE\n\n        internal_energy = pressure_geom / (gamma_eff - 1.0) if gamma_eff != 1.0 else 0.0\n        energy_density_geom = rho_geom + internal_energy\n        return pressure_geom, energy_density_geom"}
{"id": "a5d980aef3f5c836", "name": "interpolate_face_velocity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["phi_cell1", "phi_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_velocity(phi_cell1, phi_cell2):\n    \"\"\"Simple linear interpolation to face center (for collocated grid).\"\"\"\n    return 0.5 * (phi_cell1 + phi_cell2)"}
{"id": "bab93adae46b7ace", "name": "interpolate_face_pressure", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["p_cell1", "p_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_pressure(p_cell1, p_cell2):\n    \"\"\"Simple linear interpolation for pressure at face center.\"\"\"\n    return 0.5 * (p_cell1 + p_cell2)"}
{"id": "4ffd830e7fe01008", "name": "interpolate_face_velocity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["phi_cell1", "phi_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_velocity(phi_cell1, phi_cell2):\n    \"\"\"Simple linear interpolation to face center (for collocated grid).\"\"\"\n    return 0.5 * (phi_cell1 + phi_cell2)"}
{"id": "7857b61cd7ddbeff", "name": "interpolate_face_pressure", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["p_cell1", "p_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_pressure(p_cell1, p_cell2):\n    \"\"\"Simple linear interpolation for pressure at face center.\"\"\"\n    return 0.5 * (p_cell1 + p_cell2)"}
{"id": "1a7b8a56403fd9df", "name": "interpolate_face_velocity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["phi_cell1", "phi_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_velocity(phi_cell1, phi_cell2):\n    \"\"\"Simple linear interpolation to face center (for collocated grid).\"\"\"\n    return 0.5 * (phi_cell1 + phi_cell2)"}
{"id": "80e45d5797595de6", "name": "interpolate_face_pressure", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["p_cell1", "p_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_pressure(p_cell1, p_cell2):\n    \"\"\"Simple linear interpolation for pressure at face center.\"\"\"\n    return 0.5 * (p_cell1 + p_cell2)"}
{"id": "2f275a189fa287fe", "name": "interpolate_face_velocity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["phi_cell1", "phi_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_velocity(phi_cell1, phi_cell2):\n    \"\"\"Simple linear interpolation to face center (for collocated grid).\"\"\"\n    return 0.5 * (phi_cell1 + phi_cell2)"}
{"id": "fed5dd8b9e48a19e", "name": "interpolate_face_pressure", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 112, "cfd_tags": ["pressure"], "parameters": ["p_cell1", "p_cell2"], "complexity": 3, "length": 3, "snippet": "def interpolate_face_pressure(p_cell1, p_cell2):\n    \"\"\"Simple linear interpolation for pressure at face center.\"\"\"\n    return 0.5 * (p_cell1 + p_cell2)"}
{"id": "53a5d67d9b0e933c", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #1\\Version 0\\grid\\structured.py", "quality": 112, "cfd_tags": ["mesh"], "parameters": ["self", "Lx", "Ly", "Nx", "Ny"], "complexity": 1, "length": 18, "snippet": "    def __init__(self, Lx, Ly, Nx, Ny):\n        \"\"\"\n        Initialize the grid.\n        Args:\n            Lx (float): Length of the domain in x-direction.\n            Ly (float): Length of the domain in y-direction.\n            Nx (int): Number of grid points in x-direction.\n            Ny (int): Number of grid points in y-direction.\n        \"\"\"\n        self.Lx = Lx\n        self.Ly = Ly\n        self.Nx = Nx\n        self.Ny = Ny\n        self.dx = Lx / (Nx - 1)\n        self.dy = Ly / (Ny - 1)\n        self.x = np.linspace(0, Lx, Nx)\n        self.y = np.linspace(0, Ly, Ny)\n        self.X, self.Y = np.meshgrid(self.x, self.y)"}
{"id": "a4d96e98161ee052", "name": "cell_centers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #1\\Version 0\\grid\\structured.py", "quality": 112, "cfd_tags": ["mesh"], "parameters": ["self"], "complexity": 1, "length": 8, "snippet": "    def cell_centers(self):\n        \"\"\"\n        Returns the coordinates of cell centers (excluding boundaries).\n        \"\"\"\n        x_cc = self.x[1:-1]\n        y_cc = self.y[1:-1]\n        X_cc, Y_cc = np.meshgrid(x_cc, y_cc)\n        return X_cc, Y_cc"}
{"id": "770f4706e8833f44", "name": "analyze_cfl_condition", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\cfl_analysis.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["u", "v", "dx", "dy", "dt"], "complexity": 5, "length": 28, "snippet": "def analyze_cfl_condition(u, v, dx, dy, dt):\n    \"\"\"\n    Calculate CFL number for given velocity fields and grid spacing\n    \n    Parameters:\n    -----------\n    u, v : numpy arrays\n        Velocity field components\n    dx, dy : float\n        Grid spacing\n    dt : float\n        Time step\n        \n    Returns:\n    --------\n    max_cfl : float\n        Maximum CFL number\n    avg_cfl : float\n        Average CFL number\n    \"\"\"\n    # Calculate CFL number in x and y directions\n    cfl_x = np.abs(u) * dt / dx\n    cfl_y = np.abs(v) * dt / dy\n    \n    # Total CFL is sum of components\n    cfl_total = cfl_x + cfl_y\n    \n    return np.max(cfl_total), np.mean(cfl_total)"}
{"id": "6e16e3cc331f938d", "name": "add_residuals", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\residuals.py", "quality": 112, "cfd_tags": ["residual"], "parameters": ["self", "u_res", "v_res", "cont_res"], "complexity": 1, "length": 9, "snippet": "    def add_residuals(self, u_res: float, v_res: float, cont_res: float):\n        \"\"\"\n        Add residuals to the tracking lists.\n        \"\"\"\n        self.iteration_count += 1\n        self.iterations.append(self.iteration_count)\n        self.u_residuals.append(u_res)\n        self.v_residuals.append(v_res)\n        self.continuity_residuals.append(cont_res)"}
{"id": "2981b91a3255bf9d", "name": "plot_residuals", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\residuals.py", "quality": 112, "cfd_tags": ["residual"], "parameters": ["self", "title", "save_path"], "complexity": 5, "length": 30, "snippet": "    def plot_residuals(self, title: Optional[str] = None, \n                      save_path: Optional[str] = None):\n        \"\"\"\n        Plot the residual history.\n        \n        Parameters:\n        -----------\n        title: Optional title for the plot\n        save_path: Optional file path to save the plot\n        \"\"\"\n        plt.figure(figsize=(10, 6))\n        plt.plot(self.iterations, self.u_residuals, 'b-', label='U-momentum')\n        plt.plot(self.iterations, self.v_residuals, 'r-', label='V-momentum')\n        plt.plot(self.iterations, self.continuity_residuals, 'g-', label='Continuity')\n        \n        plt.xlabel('Iteration')\n        plt.ylabel('Normalized Residual')\n        plt.yscale('log')\n        plt.grid(True, which='both', linestyle='--', alpha=0.6)\n        plt.legend()\n        \n        if title:\n            plt.title(title)\n        else:\n            plt.title('Convergence History')\n            \n        if save_path:\n            plt.savefig(save_path, dpi=300, bbox_inches='tight')\n            \n        plt.show()"}
{"id": "72fe3d44295f1a78", "name": "clear", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\residuals.py", "quality": 112, "cfd_tags": ["residual"], "parameters": ["self"], "complexity": 1, "length": 9, "snippet": "    def clear(self):\n        \"\"\"\n        Reset the residual tracking data.\n        \"\"\"\n        self.u_residuals = []\n        self.v_residuals = []\n        self.continuity_residuals = []\n        self.iterations = []\n        self.iteration_count = 0"}
{"id": "bc4790c79f147caa", "name": "calculate_vortex_center", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\scripts\\grid_independence_study.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["u", "v", "grid"], "complexity": 4, "length": 25, "snippet": "def calculate_vortex_center(u, v, grid):\n    \"\"\"\n    Calculate the location of the primary vortex center by finding the point\n    where both velocity components are closest to zero in the interior of the domain.\n    Returns (x, y) coordinates and velocity magnitude at the vortex center.\n    \"\"\"\n    # Create velocity magnitude field\n    vel_mag = np.sqrt(u**2 + v**2)\n    \n    # Only consider interior points (avoid boundaries)\n    interior_slice = slice(1, -1), slice(1, -1)\n    interior_vel_mag = vel_mag[interior_slice]\n    \n    # Find the index of minimum velocity magnitude\n    min_idx = np.unravel_index(np.argmin(interior_vel_mag), interior_vel_mag.shape)\n    \n    # Convert to grid coordinates\n    x_idx = min_idx[1] + 1  # Add 1 because we sliced from 1:-1\n    y_idx = min_idx[0] + 1\n    \n    x = grid.X[y_idx, x_idx]\n    y = grid.Y[y_idx, x_idx]\n    min_vel = vel_mag[y_idx, x_idx]\n    \n    return x, y, min_vel"}
{"id": "ef696dd6938be110", "name": "find_stream_function", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\scripts\\visualize_flow.py", "quality": 112, "cfd_tags": ["velocity"], "parameters": ["u", "v", "dx", "dy"], "complexity": 4, "length": 14, "snippet": "def find_stream_function(u, v, dx, dy):\n    \"\"\"\n    Calculate the stream function from velocity components.\n    Uses the fact that u = d\u03c8/dy and v = -d\u03c8/dx\n    Returns the stream function array.\n    \"\"\"\n    ny, nx = u.shape\n    psi = np.zeros((ny, nx))\n    \n    # Integrate from bottom to top\n    for j in range(1, ny):\n        psi[j, :] = psi[j-1, :] + u[j-1, :] * dy\n    \n    return psi"}
{"id": "e97307e9e3afa039", "name": "test_grid_independence_study", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_validation.py", "quality": 112, "cfd_tags": ["solver", "velocity"], "parameters": [], "complexity": 5, "length": 18, "snippet": "def test_grid_independence_study():\n    \"\"\"\n    A simple grid independence check. Doubling the grid resolution should\n    result in a similar, but more resolved, flow field. The velocity at the\n    center point should converge.\n    \"\"\"\n    # Run with a coarse grid\n    u_coarse, _, _ = _run_validation_solver(N=16, Re=100.0, T=5.0)\n    center_u_coarse = u_coarse[8, 8]\n\n    # Run with a finer grid\n    u_fine, _, _ = _run_validation_solver(N=32, Re=100.0, T=5.0)\n    center_u_fine = u_fine[16, 16]\n\n    # The results should be reasonably close, with the finer grid being more accurate.\n    # For this test, we just check they are within 20% of each other.\n    assert np.isclose(center_u_coarse, center_u_fine, rtol=0.2), \\\n        f\"Grid independence check failed. Coarse: {center_u_coarse}, Fine: {center_u_fine}\""}
{"id": "bbaef3178ae2ce80", "name": "setUp", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 4, "snippet": "    def setUp(self):\n        \"\"\"Set up the EoS module for testing.\"\"\"\n        self.eos_module = EoSModule()\n        self.RHO_CGS_TO_GEOM = 6.67430e-8 / (2.99792458e10)**2"}
{"id": "78b7031002a23b8a", "name": "setUp", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\cpsail_finitude_14.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 4, "snippet": "    def setUp(self):\n        \"\"\"Set up the EoS module for testing.\"\"\"\n        self.eos_module = EoSModule()\n        self.RHO_CGS_TO_GEOM = 6.67430e-8 / (2.99792458e10)**2"}
{"id": "4f2dcb7aa1cb96c6", "name": "setUp", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 4, "snippet": "    def setUp(self):\n        \"\"\"Set up the EoS module for testing.\"\"\"\n        self.eos_module = EoSModule()\n        self.RHO_CGS_TO_GEOM = 6.67430e-8 / (2.99792458e10)**2"}
{"id": "b519d84b90c0298a", "name": "setUp", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 4, "snippet": "    def setUp(self):\n        \"\"\"Set up the EoS module for testing.\"\"\"\n        self.eos_module = EoSModule()\n        self.RHO_CGS_TO_GEOM = 6.67430e-8 / (2.99792458e10)**2"}
{"id": "31a914a09a9f1ef4", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The sum of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "8ea1f6a3f349e8e3", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 5, "length": 17, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system (not strictly needed for subtraction lower bound,\n                      but included as per general framework function signature).\n\n    Returns:\n        The difference between the two numbers, capped at zero if the result is negative.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "0be3b8de09bc71e0", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The product of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "7a9abece643e05dd", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "9741658ec5f939d7", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "2dac9b3ca1b983d9", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "0d506857650af060", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "f122aa8db76c214f", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "6bcc76257b035844", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "86b1716679544168", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The sum of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "b5ffe7df545182ba", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 5, "length": 17, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system (not strictly needed for subtraction lower bound,\n                      but included as per general framework function signature).\n\n    Returns:\n        The difference between the two numbers, capped at zero if the result is negative.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "145c35a0aa0a7a06", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The product of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "3f03637e8f677c99", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "ddb38e380c37bcd2", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "92993a03a393e1be", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "ec099c6670571267", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "42954b1705eeef36", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "20d3d7f8ac009239", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "dd7f3e399f990a55", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "81900ecf92437bf0", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "fbe17d812ba6991d", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "d97460e8aeb24e06", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "32d5b7d13edc3e19", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "43f5ff3e1754a48e", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "1a2036c31ef87889", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "86c8f68cea4d384c", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "61855608bef5eae3", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "feaba235f133c8ae", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "2a22c7676dcbda88", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "7d5b69c07b5d0212", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "56d9e9014b38bc22", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The sum of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "d846dabb5919975e", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 5, "length": 17, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system (not strictly needed for subtraction lower bound,\n                      but included as per general framework function signature).\n\n    Returns:\n        The difference between the two numbers, capped at zero if the result is negative.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "82342b7b238857ce", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The product of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "b6ac9da371ecc67b", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "b7d96d2284c62ea0", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "da41bbd1dea7365e", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "c648cb4aa952b310", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "212de8c3ca8325f2", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "3f004bdcb23cf68d", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "d5c2b2989a805ab2", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The sum of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "a3602b4480240ee7", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 5, "length": 17, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system (not strictly needed for subtraction lower bound,\n                      but included as per general framework function signature).\n\n    Returns:\n        The difference between the two numbers, capped at zero if the result is negative.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "7da8fa9ffabb61f8", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The product of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "c711d5fe8d1b1fb5", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "ed34aa198848ff85", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "633485fac837befb", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "3bd4ef53c43f7588", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "c620556de16a664a", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "bfe6ccfd01cf1091", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "0f716850b121c28f", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "90389c5aa583b046", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "c1a0fd356873cfd3", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "2e9b6eab918e0338", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "5f814c09a1118998", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "53bbd559a5ddd73f", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "b2375342e34d1634", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "801dde1cf4d6b469", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "32382d2747a2149e", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "79e7b666c8e1a654", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "69f380ce87583657", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "f1491a3fed3cd7c0", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 8, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "f58f8faa204fba1f", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The sum of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "521dce7809970557", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 5, "length": 17, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system (not strictly needed for subtraction lower bound,\n                      but included as per general framework function signature).\n\n    Returns:\n        The difference between the two numbers, capped at zero if the result is negative.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "b433d4980699729c", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The product of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "a5149a6a84ed4b4f", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "8adedfc3f15a1c4d", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "2eb5a94868ee4f21", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "751df4b3a7067ccc", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "7cdaf2021f218cae", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "d50ece746989e3d4", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "4a21347cb8f524df", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def add_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Adds two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The sum of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_sum = num1 + num2\n    if calculated_sum > cosmos_limit:\n        return cosmos_limit\n    return calculated_sum"}
{"id": "aafad1c88bc86a46", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 5, "length": 17, "snippet": "def subtract_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Subtracts two numbers within the finite system, preventing results below zero.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system (not strictly needed for subtraction lower bound,\n                      but included as per general framework function signature).\n\n    Returns:\n        The difference between the two numbers, capped at zero if the result is negative.\n    \"\"\"\n    calculated_difference = num1 - num2\n    if calculated_difference < 0:\n        return 0\n    return calculated_difference"}
{"id": "a003ca44a28d6d71", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 2, "length": 16, "snippet": "def multiply_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Multiplies two numbers within the finite system, capping the result at the cosmos_limit.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The product of the two numbers, capped at the cosmos_limit.\n    \"\"\"\n    calculated_product = num1 * num2\n    if calculated_product > cosmos_limit:\n        return cosmos_limit\n    return calculated_product"}
{"id": "7d5b28e0980bb8ae", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "bde9b1c5f7fd4e55", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "90084e80bb149493", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "5b22f1cea838d866", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "6e3e52ea52f9e069", "name": "to_finity_name", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_name(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic name.\"\"\"\n    name, _ = generate_name_and_abbreviation(number, scale_ranges)\n    return name"}
{"id": "91b1981b63f2dbe8", "name": "to_finity_abbreviation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 110, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 1, "length": 4, "snippet": "def to_finity_abbreviation(number, scale_ranges):\n    \"\"\"Converts a standard numerical value to its algorithmic abbreviation.\"\"\"\n    _, abbreviation = generate_name_and_abbreviation(number, scale_ranges)\n    return abbreviation"}
{"id": "5771ce908d7a707f", "name": "setUp", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12 (1).py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 4, "snippet": "    def setUp(self):\n        \"\"\"Set up the EoS module for testing.\"\"\"\n        self.eos_module = EoSModule()\n        self.RHO_CGS_TO_GEOM = 6.67430e-8 / (2.99792458e10)**2"}
{"id": "e5f27ae144660ced", "name": "setUp", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 4, "snippet": "    def setUp(self):\n        \"\"\"Set up the EoS module for testing.\"\"\"\n        self.eos_module = EoSModule()\n        self.RHO_CGS_TO_GEOM = 6.67430e-8 / (2.99792458e10)**2"}
{"id": "db07080b5bd2c237", "name": "tanh_stretch", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 110, "cfd_tags": [], "parameters": ["n_points", "domain_length", "stretching_factor"], "complexity": 3, "length": 5, "snippet": "def tanh_stretch(n_points, domain_length, stretching_factor):\n    \"\"\"Generates stretched grid points using a tanh function.\"\"\"\n    xi = np.linspace(0, 1, n_points)\n    stretched_xi = (np.tanh(stretching_factor * (xi - 0.5)) / np.tanh(stretching_factor * 0.5)) + 1\n    return stretched_xi * 0.5 * domain_length"}
{"id": "1a57f2ebb2d16e4a", "name": "spacing", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #1\\Version 0\\grid\\structured.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 5, "snippet": "    def spacing(self):\n        \"\"\"\n        Returns grid spacing (dx, dy).\n        \"\"\"\n        return self.dx, self.dy"}
{"id": "271adc9ff3ef5430", "name": "calculate_cfl", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\cfl_one_step.py", "quality": 110, "cfd_tags": ["velocity"], "parameters": ["u", "v", "dx", "dy", "dt"], "complexity": 6, "length": 36, "snippet": "def calculate_cfl(u, v, dx, dy, dt):\n    \"\"\"\n    Calculate CFL number based on velocity field and grid parameters\n    \n    Parameters:\n    -----------\n    u, v : numpy arrays\n        Velocity components\n    dx, dy : float\n        Grid spacing\n    dt : float\n        Time step\n        \n    Returns:\n    --------\n    cfl_total : numpy array\n        CFL values at each grid point\n    max_cfl : float\n        Maximum CFL value\n    \"\"\"\n    # Initialize CFL arrays\n    N = u.shape[0]\n    cfl_x = np.zeros_like(u)\n    cfl_y = np.zeros_like(v)\n    \n    # Calculate CFL components\n    for j in range(1, N-1):\n        for i in range(1, N-1):\n            cfl_x[j, i] = np.abs(u[j, i]) * dt / dx\n            cfl_y[j, i] = np.abs(v[j, i]) * dt / dy\n    \n    # Total CFL is sum of components\n    cfl_total = cfl_x + cfl_y\n    max_cfl = np.max(cfl_total)\n    \n    return cfl_total, max_cfl"}
{"id": "973daee1272f9742", "name": "monkeypatch_for_cert", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\get-pip.py", "quality": 110, "cfd_tags": [], "parameters": ["tmpdir"], "complexity": 4, "length": 25, "snippet": "def monkeypatch_for_cert(tmpdir):\n    \"\"\"Patches `pip install` to provide default certificate with the lowest priority.\n\n    This ensures that the bundled certificates are used unless the user specifies a\n    custom cert via any of pip's option passing mechanisms (config, env-var, CLI).\n\n    A monkeypatch is the easiest way to achieve this, without messing too much with\n    the rest of pip's internals.\n    \"\"\"\n    from pip._internal.commands.install import InstallCommand\n\n    # We want to be using the internal certificates.\n    cert_path = os.path.join(tmpdir, \"cacert.pem\")\n    with open(cert_path, \"wb\") as cert:\n        cert.write(pkgutil.get_data(\"pip._vendor.certifi\", \"cacert.pem\"))\n\n    install_parse_args = InstallCommand.parse_args\n\n    def cert_parse_args(self, args):\n        if not self.parser.get_default_values().cert:\n            # There are no user provided cert -- force use of bundled cert\n            self.parser.defaults[\"cert\"] = cert_path  # calculated above\n        return install_parse_args(self, args)\n\n    InstallCommand.parse_args = cert_parse_args"}
{"id": "b0e6fe110c62d0bc", "name": "calculate_residuals", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\hybrid_solver.py", "quality": 110, "cfd_tags": ["cfd", "pressure", "residual", "velocity"], "parameters": ["u", "v", "u_prev", "v_prev", "p"], "complexity": 9, "length": 43, "snippet": "def calculate_residuals(u, v, u_prev, v_prev, p):\n    \"\"\"\n    Calculate the residuals of the solution.\n    \n    Parameters:\n    ----------\n    u, v : ndarray\n        Current velocity components\n    u_prev, v_prev : ndarray\n        Previous velocity components\n    p : ndarray\n        Pressure field\n        \n    Returns:\n    -------\n    dict\n        Dictionary containing the residuals for u, v, and continuity\n    \"\"\"\n    if _HAVE_CPP_EXTENSION:\n        # Use the C++ implementation\n        return pyflow_core_cfd.calculate_residuals(u, v, u_prev, v_prev, p)\n    else:\n        # Fallback to a Python implementation\n        ny, nx = u.shape\n        \n        # Calculate momentum residuals\n        u_res = np.sum(np.abs(u[1:-1, 1:-1] - u_prev[1:-1, 1:-1])) / ((ny-2) * (nx-2))\n        v_res = np.sum(np.abs(v[1:-1, 1:-1] - v_prev[1:-1, 1:-1])) / ((ny-2) * (nx-2))\n        \n        # Calculate continuity residual\n        cont_res = 0.0\n        for i in range(1, ny-1):\n            for j in range(1, nx-1):\n                div = (u[i, j+1] - u[i, j-1]) + (v[i+1, j] - v[i-1, j])\n                cont_res += np.abs(div)\n        \n        cont_res /= ((ny-2) * (nx-2) * 2.0)\n        \n        return {\n            'u_res': u_res,\n            'v_res': v_res,\n            'cont_res': cont_res\n        }"}
{"id": "40c7b70cf36813e4", "name": "log_header", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\logging.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 13, "snippet": "    def log_header(self):\n        \"\"\"Prints the header for the simulation log.\"\"\"\n        header = (\n            f\"Starting simulation:\\n\"\n            f\"  Grid size (N): {self.N}\\n\"\n            f\"  Reynolds (Re): {self.Re}\\n\"\n            f\"  Time step (dt): {self.dt}\\n\"\n            f\"  Total time (T): {self.T}\\n\"\n            f\"  Total steps: {self.nt}\\n\"\n            f\"  Logging every: {self.log_interval} steps\\n\"\n            f\"{'-'*60}\"\n        )\n        print(header)"}
{"id": "c213fb5d97dcb8f0", "name": "log_footer", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\logging.py", "quality": 110, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 3, "snippet": "    def log_footer(self):\n        \"\"\"Prints a footer to conclude the log.\"\"\"\n        print(f\"\\n{'-'*60}\\nSimulation finished.\\n\")"}
{"id": "8c3db432d1472d90", "name": "calculate_rmse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\scripts\\grid_independence_study.py", "quality": 110, "cfd_tags": [], "parameters": ["predicted", "actual"], "complexity": 2, "length": 3, "snippet": "def calculate_rmse(predicted, actual):\n    \"\"\"Calculate Root Mean Square Error between two arrays\"\"\"\n    return np.sqrt(np.mean((predicted - actual)**2))"}
{"id": "925d175f511f2b40", "name": "test_import_solver", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_import.py", "quality": 110, "cfd_tags": ["solver"], "parameters": [], "complexity": 3, "length": 9, "snippet": "def test_import_solver():\n    \"\"\"\n    Tests if the solver module can be imported without crashing the interpreter.\n    \"\"\"\n    try:\n        from pyflow.solver import solve_lid_driven_cavity\n    except Exception as e:\n        pytest.fail(f\"Failed to import solve_lid_driven_cavity: {e}\")\n    assert True"}
{"id": "88369c3343ac577e", "name": "test_single_step_execution", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_simple.py", "quality": 110, "cfd_tags": ["solver", "timestep"], "parameters": [], "complexity": 6, "length": 30, "snippet": "def test_single_step_execution():\n    \"\"\"\n    Tests if the solver can execute a single timestep without crashing.\n    \"\"\"\n    N = 16\n    Re = 10.0\n    T = 0.001\n    dt = 0.001\n    dx = dy = 1.0 / (N - 1)\n    \n    try:\n        u, v, p = solve_lid_driven_cavity(N, dx, dy, Re, dt, T, p_iterations=10)\n        # Check if outputs are valid numpy arrays with the correct shape\n        assert isinstance(u, np.ndarray)\n        assert u.shape == (N, N)\n        assert not np.isnan(u).any()\n        assert not np.isinf(u).any()\n\n        assert isinstance(v, np.ndarray)\n        assert v.shape == (N, N)\n        assert not np.isnan(v).any()\n        assert not np.isinf(v).any()\n\n        assert isinstance(p, np.ndarray)\n        assert p.shape == (N, N)\n        assert not np.isnan(p).any()\n        assert not np.isinf(p).any()\n\n    except Exception as e:\n        pytest.fail(f\"Solver crashed on a single step with a simple configuration: {e}\")"}
{"id": "28ba2f2cb9b056dc", "name": "has_flag", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\_cpp_core\\setup.py", "quality": 110, "cfd_tags": [], "parameters": ["compiler", "flagname"], "complexity": 3, "length": 12, "snippet": "def has_flag(compiler, flagname):\n    \"\"\"Return a boolean indicating whether a flag name is supported on\n    the specified compiler.\n    \"\"\"\n    import tempfile\n    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:\n        f.write('int main (int argc, char **argv) { return 0; }')\n        try:\n            compiler.compile([f.name], extra_postargs=[flagname])\n        except CompileError:\n            return False\n    return True"}
{"id": "d8ad315806403334", "name": "cpp_flag", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\_cpp_core\\setup.py", "quality": 110, "cfd_tags": [], "parameters": ["compiler"], "complexity": 4, "length": 10, "snippet": "def cpp_flag(compiler):\n    \"\"\"Return the -std=c++[11/14/17] compiler flag.\n    The newer version is prefered over c++11 (when it is available).\n    \"\"\"\n    flags = ['-std=c++17', '-std=c++14', '-std=c++11']\n\n    for flag in flags:\n        if has_flag(compiler, flag): return flag\n\n    raise RuntimeError('Unsupported compiler -- at least C++11 support is needed!')"}
{"id": "7689c79cdd63fbad", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v021.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "5d5dca3bf6474943", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v021.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "9eecd44a88ffeb24", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v021.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "2f8086cc0889573c", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v021.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "4bcba57c61027c8c", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v023.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "0ec7c7a5d0f5df96", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v023.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "1f5232b2ec1a453c", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v023.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "0c8ea6958dd6466e", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v023.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "6aa974fa628431c4", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v023.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "c881be2b8cc8f61c", "name": "visualize_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cfd_v023.py", "quality": 108, "cfd_tags": ["mesh", "pressure", "velocity"], "parameters": ["grid", "u", "v", "p"], "complexity": 9, "length": 49, "snippet": "def visualize_results(grid, u, v, p):\n    \"\"\"\n    Visualizes the converged velocity vectors and pressure contours.\n\n    Args:\n        grid (dict): Dictionary containing grid parameters (nx, ny, dx, dy, lx, ly).\n        u (np.ndarray): Converged u-velocity field (ny, nx).\n        v (np.ndarray): Converged v-velocity field (ny, nx).\n        p (np.ndarray): Converged pressure field (ny, nx).\n    \"\"\"\n    nx = grid['nx']\n    ny = grid['ny']\n    lx = grid['lx']\n    ly = grid['ly']\n\n    # Create a meshgrid for plotting\n    # Cell centers are at (i + 0.5)*dx, (j + 0.5)*dy\n    x = np.linspace(grid['dx'] / 2.0, grid['lx'] - grid['dx'] / 2.0, nx)\n    y = np.linspace(grid['dy'] / 2.0, grid['ly'] - grid['dy'] / 2.0, ny)\n    X, Y = np.meshgrid(x, y)\n\n    # Create the figure and axes\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    # 3. Generate a contour plot of the pressure field p\n    pressure_contour = ax.contourf(X, Y, p, cmap='viridis', levels=50)\n    fig.colorbar(pressure_contour, label='Pressure')\n\n    # 4. Overlay a quiver (vector) plot of the velocity field using u and v\n    # To avoid clutter, plot vectors on a coarser grid if nx or ny are large\n    skip = max(1, int(max(nx, ny) / 20)) # Plot approximately 20x20 vectors\n    ax.quiver(X[::skip, ::skip], Y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n              color='white', scale=5.0, alpha=0.8) # Adjust scale as needed\n\n    # 5. Add labels, a title\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Velocity Vectors and Pressure Contours')\n    ax.set_aspect('equal', adjustable='box') # Keep aspect ratio equal\n\n    # Set plot limits to match the grid dimensions\n    ax.set_xlim(0, lx)\n    ax.set_ylim(0, ly)\n\n    # Invert y-axis to match typical grid orientation (optional, depends on convention)\n    # ax.invert_yaxis()\n\n    # 6. Display the combined plot\n    plt.show()"}
{"id": "8406c8d42da24b90", "name": "include_setuptools", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\get-pip.py", "quality": 108, "cfd_tags": [], "parameters": ["args"], "complexity": 6, "length": 9, "snippet": "def include_setuptools(args):\n    \"\"\"\n    Install setuptools only if absent, not excluded and when using Python <3.12.\n    \"\"\"\n    cli = not args.no_setuptools\n    env = not os.environ.get(\"PIP_NO_SETUPTOOLS\")\n    absent = not importlib.util.find_spec(\"setuptools\")\n    python_lt_3_12 = this_python < (3, 12)\n    return cli and env and absent and python_lt_3_12"}
{"id": "14e415270d54af92", "name": "include_wheel", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\get-pip.py", "quality": 108, "cfd_tags": [], "parameters": ["args"], "complexity": 6, "length": 9, "snippet": "def include_wheel(args):\n    \"\"\"\n    Install wheel only if absent, not excluded and when using Python <3.12.\n    \"\"\"\n    cli = not args.no_wheel\n    env = not os.environ.get(\"PIP_NO_WHEEL\")\n    absent = not importlib.util.find_spec(\"wheel\")\n    python_lt_3_12 = this_python < (3, 12)\n    return cli and env and absent and python_lt_3_12"}
{"id": "c79cbe61aecbbfd3", "name": "test_pressure_poisson_solver", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\test_cpp_cfd.py", "quality": 108, "cfd_tags": ["cfd", "mesh", "pressure", "solver"], "parameters": [], "complexity": 9, "length": 45, "snippet": "def test_pressure_poisson_solver():\n    \"\"\"Test the C++ pressure Poisson solver\"\"\"\n    print(\"\\n--- Testing C++ Pressure Poisson Solver ---\")\n    \n    # Create a grid\n    n = 65  # Grid size\n    L = 1.0  # Domain size\n    dx = dy = L / (n - 1)  # Grid spacing\n    \n    # Create a simple test problem\n    x = np.linspace(0, L, n)\n    y = np.linspace(0, L, n)\n    X, Y = np.meshgrid(x, y)\n    \n    # Create a source term (RHS of the Poisson equation)\n    b = np.zeros((n, n))\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            # Some arbitrary source pattern\n            b[i, j] = np.sin(np.pi * X[i, j]) * np.sin(np.pi * Y[i, j])\n    \n    # Initial guess for pressure\n    p_init = np.zeros((n, n))\n    \n    # Solve with the C++ function\n    print(\"Solving pressure Poisson equation with C++ function...\")\n    start_time = time.time()\n    p_cpp = pyflow_core_cfd.solve_pressure_poisson(\n        b, p_init, dx, dy, \n        max_iter=1000, tolerance=1e-6, alpha_p=0.8\n    )\n    cpp_time = time.time() - start_time\n    print(f\"C++ solution time: {cpp_time:.3f} seconds\")\n    \n    # Visualize the solution\n    plt.figure(figsize=(10, 8))\n    plt.contourf(X, Y, p_cpp, cmap='viridis', levels=50)\n    plt.colorbar(label='Pressure')\n    plt.title('Pressure Field (C++ Solution)')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.savefig(\"pressure_cpp_solution.png\", dpi=300)\n    plt.close()\n    \n    return p_cpp, cpp_time"}
{"id": "24f608583b631ad1", "name": "test_velocity_correction", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\test_cpp_cfd.py", "quality": 108.0, "cfd_tags": ["boundary", "cfd", "mesh", "pressure", "velocity"], "parameters": [], "complexity": 8, "length": 68, "snippet": "def test_velocity_correction():\n    \"\"\"Test the C++ velocity correction function\"\"\"\n    print(\"\\n--- Testing C++ Velocity Correction ---\")\n    \n    # Create a grid\n    n = 65  # Grid size\n    L = 1.0  # Domain size\n    dx = dy = L / (n - 1)  # Grid spacing\n    dt = 0.001  # Time step\n    \n    # Create initial velocity fields for a lid-driven cavity\n    u = np.zeros((n, n))\n    v = np.zeros((n, n))\n    \n    # Set lid velocity (top boundary)\n    u[-1, 1:-1] = 1.0\n    \n    # Create a pressure field (some arbitrary pattern)\n    p = np.zeros((n, n))\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            # Some pattern that will create pressure gradients\n            p[i, j] = 0.1 * np.sin(2 * np.pi * i / n) * np.cos(2 * np.pi * j / n)\n    \n    # Correct velocities using the C++ function\n    print(\"Correcting velocities with C++ function...\")\n    start_time = time.time()\n    u_corr, v_corr = pyflow_core_cfd.correct_velocities(u, v, p, dx, dy, dt)\n    cpp_time = time.time() - start_time\n    print(f\"C++ velocity correction time: {cpp_time:.3f} seconds\")\n    \n    # Calculate the change in velocities\n    u_diff = u_corr - u\n    v_diff = v_corr - v\n    \n    # Plot the velocity corrections\n    x = np.linspace(0, L, n)\n    y = np.linspace(0, L, n)\n    X, Y = np.meshgrid(x, y)\n    \n    plt.figure(figsize=(15, 5))\n    \n    plt.subplot(1, 3, 1)\n    plt.contourf(X, Y, p, cmap='viridis', levels=20)\n    plt.colorbar(label='Pressure')\n    plt.title('Pressure Field')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    \n    plt.subplot(1, 3, 2)\n    plt.contourf(X, Y, u_diff, cmap='RdBu_r', levels=20)\n    plt.colorbar(label='u correction')\n    plt.title('U-Velocity Correction')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    \n    plt.subplot(1, 3, 3)\n    plt.contourf(X, Y, v_diff, cmap='RdBu_r', levels=20)\n    plt.colorbar(label='v correction')\n    plt.title('V-Velocity Correction')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    \n    plt.tight_layout()\n    plt.savefig(\"velocity_correction.png\", dpi=300)\n    plt.close()\n    \n    return u_corr, v_corr, cpp_time"}
{"id": "d42226521e3926eb", "name": "plot_residuals", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\visualize_flow.py", "quality": 108, "cfd_tags": ["residual", "velocity"], "parameters": ["residuals", "Re", "ax"], "complexity": 8, "length": 30, "snippet": "def plot_residuals(residuals, Re, ax=None):\n    \"\"\"\n    Plot convergence history of residuals\n    \n    Parameters:\n    -----------\n    residuals : dict\n        Dictionary with keys 'u_res', 'v_res', 'cont_res'\n    Re : float\n        Reynolds number for the title\n    ax : matplotlib axis, optional\n        Axis to plot on\n    \"\"\"\n    if ax is None:\n        fig, ax = plt.subplots(figsize=(8, 5))\n    \n    # Plot residuals\n    iterations = np.arange(1, len(residuals['u_res'])+1)\n    ax.semilogy(iterations, residuals['u_res'], 'b-', label='u-velocity')\n    ax.semilogy(iterations, residuals['v_res'], 'r-', label='v-velocity')\n    ax.semilogy(iterations, residuals['cont_res'], 'g-', label='continuity')\n    \n    # Add labels and title\n    ax.set_title(f'Convergence History for Re={Re}')\n    ax.set_xlabel('Iteration')\n    ax.set_ylabel('Residual (log scale)')\n    ax.grid(True, which='both', linestyle='--', alpha=0.6)\n    ax.legend()\n    \n    return ax"}
{"id": "4097670e36c82958", "name": "calculate_pressure_source", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\hybrid_solver.py", "quality": 108, "cfd_tags": ["boundary", "cfd", "pressure", "velocity"], "parameters": ["u", "v", "dx", "dy", "dt"], "complexity": 10, "length": 38, "snippet": "def calculate_pressure_source(u, v, dx, dy, dt):\n    \"\"\"\n    Calculate the source term for the pressure equation.\n    \n    Parameters:\n    ----------\n    u, v : ndarray\n        Velocity components\n    dx, dy : float\n        Grid spacing\n    dt : float\n        Time step\n        \n    Returns:\n    -------\n    ndarray\n        The source term for the pressure equation\n    \"\"\"\n    if _HAVE_CPP_EXTENSION:\n        # Use the C++ implementation\n        return pyflow_core_cfd.calculate_pressure_source(u, v, dx, dy, dt)\n    else:\n        # Fallback to a Python implementation\n        ny, nx = u.shape\n        b = np.zeros_like(u)\n        \n        for i in range(1, ny-1):\n            for j in range(1, nx-1):\n                du_dx = (u[i, j+1] - u[i, j-1]) / (2.0 * dx)\n                dv_dy = (v[i+1, j] - v[i-1, j]) / (2.0 * dy)\n                \n                b[i, j] = -1.0/dt * (du_dx + dv_dy)\n        \n        # Set boundary values to zero\n        b[0, :] = b[-1, :] = 0.0\n        b[:, 0] = b[:, -1] = 0.0\n        \n        return b"}
{"id": "402040c84fbf8109", "name": "log_step", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\logging.py", "quality": 108, "cfd_tags": ["pressure", "residual", "velocity"], "parameters": ["self", "n", "u", "v", "p", "res"], "complexity": 7, "length": 43, "snippet": "    def log_step(self, n, u, v, p, res=None):\n        \"\"\"\n        Logs the state of a single simulation step, respecting the log_interval.\n        \n        Parameters:\n        -----------\n        n : int\n            Current time step number\n        u, v : ndarray\n            Velocity components\n        p : ndarray\n            Pressure field\n        res : dict, optional\n            Dictionary containing residual information\n        \"\"\"\n        if (n + 1) % self.log_interval != 0 and (n + 1) != self.nt:\n            return\n\n        percent = (n + 1) / self.nt * 100\n        sim_time = (n + 1) * self.dt\n        max_u = np.abs(u).max()\n        max_v = np.abs(v).max()\n        max_p = np.abs(p).max()\n        \n        log_line = (\n            f\"Progress: {percent:6.2f}% | Step: {n+1:6d}/{self.nt} | \"\n            f\"Time: {sim_time:8.4f}s | \"\n            f\"max|u|: {max_u:8.4f} | max|v|: {max_v:8.4f} | max|p|: {max_p:8.4f}\"\n        )\n        \n        if res is not None:\n            # Add residuals information if provided\n            log_line += (\n                f\" | u_res: {res.get('u_res', 0):8.2e} | \"\n                f\"v_res: {res.get('v_res', 0):8.2e} | \"\n                f\"cont_res: {res.get('cont_res', 0):8.2e}\"\n            )\n        \n        # Pad with spaces to clear the rest of the line and use carriage return\n        padding = ' ' * max(0, self.last_len - len(log_line))\n        sys.stdout.write(f\"\\r{log_line}{padding}\")\n        sys.stdout.flush()\n        self.last_len = len(log_line)"}
{"id": "b327e287dcc63037", "name": "test_cpp_array_modification", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_cpp_interface.py", "quality": 108, "cfd_tags": ["cfd", "solver"], "parameters": [], "complexity": 7, "length": 28, "snippet": "def test_cpp_array_modification():\n    \"\"\"\n    Test that C++ code can modify a NumPy array passed from Python.\n    This is the fundamental verification for our hybrid solver.\n    \"\"\"\n    # Ensure the function we want to test actually exists in the C++ module.\n    # This prevents the test from passing silently if the function is missing.\n    assert hasattr(pyflow_core_cfd, 'set_interior_values'), \\\n        \"The required 'set_interior_values' function is not in the C++ module.\"\n\n    # 1. Setup\n    # Create a test array filled with zeros\n    test_array = np.zeros((5, 5), dtype=np.float64)\n    test_value = 42.0\n\n    # 2. Action\n    # Call the C++ function to modify the array in-place\n    pyflow_core_cfd.set_interior_values(test_array, test_value)\n\n    # 3. Assert\n    # Create the array we expect after the C++ call\n    expected_array = np.zeros((5, 5), dtype=np.float64)\n    expected_array[1:-1, 1:-1] = test_value\n\n    # Verify that the entire array matches the expected result.\n    # This is a more robust check than verifying boundaries and interior separately.\n    np.testing.assert_array_equal(test_array, expected_array,\n                                  err_msg=\"C++ function did not modify the array as expected.\")"}
{"id": "daddb50138e4aa39", "name": "run_test_suite", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\cpsail_finitude_version_0_003_14.py", "quality": 106, "cfd_tags": [], "parameters": ["tests"], "complexity": 7, "length": 10, "snippet": "def run_test_suite(tests):\n    \"\"\"\n    Iterates through a list of test cases and prepares for their execution.\n\n    Args:\n        tests: A list of test case dictionaries, each containing 'name' and 'code'.\n    \"\"\"\n    print(\"--- Running Test Suite ---\")\n    for test_case in tests:\n        print(f\"\\nExecuting {test_case['name']}...\")"}
{"id": "4b39a10871b47267", "name": "find_vorticity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\scripts\\visualize_flow.py", "quality": 106, "cfd_tags": ["velocity"], "parameters": ["u", "v", "dx", "dy"], "complexity": 8, "length": 16, "snippet": "def find_vorticity(u, v, dx, dy):\n    \"\"\"\n    Calculate vorticity (curl of velocity)\n    \u03c9 = \u2202v/\u2202x - \u2202u/\u2202y\n    \"\"\"\n    ny, nx = u.shape\n    omega = np.zeros((ny, nx))\n    \n    # Central differencing for interior points\n    for i in range(1, ny-1):\n        for j in range(1, nx-1):\n            dudv = (v[i, j+1] - v[i, j-1]) / (2*dx)\n            dvdu = (u[i+1, j] - u[i-1, j]) / (2*dy)\n            omega[i, j] = dudv - dvdu\n    \n    return omega"}
{"id": "f1b48088e86b0156", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 17, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        # print(\"Warning: Division by zero. Returning cosmos_limit.\") # Print moved to interpreter\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "8be8fab92cc39205", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 17, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        # print(\"Warning: Division by zero. Returning cosmos_limit.\") # Print moved to interpreter\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "64a6f92230a76594", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 16, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "480c28a81b8f18f1", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 16, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "59b93b658dc3cf13", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 17, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        # print(\"Warning: Division by zero. Returning cosmos_limit.\") # Print moved to interpreter\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "7b6373e3d5c1f5f7", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 17, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        # print(\"Warning: Division by zero. Returning cosmos_limit.\") # Print moved to interpreter\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "2794d971e1f94385", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 16, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "f2440167baafaefc", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 104, "cfd_tags": [], "parameters": ["num1", "num2", "cosmos_limit"], "complexity": 8, "length": 16, "snippet": "def divide_finity_numbers(num1, num2, cosmos_limit):\n    \"\"\"\n    Divides two numbers within the finite system.\n    \"\"\"\n    if num2 == 0:\n        return cosmos_limit\n    else:\n        calculated_division = num1 / num2\n        if calculated_division > cosmos_limit:\n            return cosmos_limit\n        # Ensure the result is non-negative, though division with positive numbers won't be negative\n        # This is a safeguard based on the subtraction rule.\n        if calculated_division < 0 and num1 >= 0 and num2 > 0:\n             # This case should not happen with positive inputs, but as a safeguard\n             return 0\n        return calculated_division"}
{"id": "8ac5f7d0d86e1013", "name": "test_quick_benchmark_re100", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_benchmark_quick.py", "quality": 104, "cfd_tags": ["residual", "velocity"], "parameters": ["capsys"], "complexity": 10, "length": 27, "snippet": "def test_quick_benchmark_re100(capsys):\n    \"\"\"\n    Compares the computed centerline velocity with simplified Ghia data for Re=100.\n    Uses a smaller grid and shorter simulation time for quicker tests.\n    \"\"\"\n    Re = 100\n    NPOINTS, T, dt = 33, 3.0, 0.001\n    L = 1.0\n    grid = Grid(NPOINTS, L)\n    logger = LiveLogger(NPOINTS, Re, dt, T, log_interval=500)\n    \n    with capsys.disabled():\n        u, v, p, residuals = solve_lid_driven_cavity(\n            grid.NPOINTS, grid.dx, grid.dy, Re, dt, T,\n            p_iterations=500,\n            logger=logger\n        )\n    \n    center_idx = NPOINTS // 2\n    u_centerline = u[:, center_idx]\n    y_coords = np.linspace(0, 1, NPOINTS)\n    ghia_y = GHIA_DATA_SIMPLIFIED[Re]['y']\n    ghia_u = GHIA_DATA_SIMPLIFIED[Re]['u']\n    u_interp = np.interp(ghia_y, y_coords, u_centerline)\n    \n    # Use a more relaxed tolerance for the quick test\n    assert np.allclose(u_interp, ghia_u, atol=0.15), f\"Re={Re}: Computed u_centerline does not match simplified benchmark.\""}
{"id": "866aeead2d4c2c76", "name": "test_hybrid_quick_benchmark", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_benchmark_quick.py", "quality": 104, "cfd_tags": ["boundary", "residual", "solver", "velocity"], "parameters": ["capsys"], "complexity": 12, "length": 31, "snippet": "def test_hybrid_quick_benchmark(capsys):\n    \"\"\"\n    Test the hybrid solver specifically with a very quick benchmark to ensure it works properly.\n    This test is skipped if the hybrid solver is not available.\n    \"\"\"\n    Re = 100  # Use Re=100 for faster convergence\n    NPOINTS, T, dt = 33, 1.0, 0.001  # Increased simulation time to allow flow to develop\n    L = 1.0\n    grid = Grid(NPOINTS, L)\n    logger = LiveLogger(NPOINTS, Re, dt, T, log_interval=500)\n    \n    with capsys.disabled():\n        print(\"Running quick hybrid solver benchmark...\")\n        u, v, p, residuals = solve_hybrid(\n            grid.NPOINTS, grid.dx, grid.dy, Re, dt, T,\n            p_iterations=100,  # Increased iterations for better convergence\n            alpha_u=0.9,       # Increased under-relaxation factor for faster convergence\n            logger=logger\n        )\n    \n    # Just check that we get reasonable output without errors\n    assert np.all(np.isfinite(u)), \"Hybrid solver produced non-finite values in u\"\n    assert np.all(np.isfinite(v)), \"Hybrid solver produced non-finite values in v\"\n    assert np.all(np.isfinite(p)), \"Hybrid solver produced non-finite values in p\"\n    \n    # Check boundary conditions are properly enforced\n    assert np.allclose(u[-1,1:-1], 1.0), \"Lid velocity not properly set\"\n    assert np.allclose(u[0,:], 0.0), \"Bottom wall velocity not zero\"\n    \n    # Verify that the solver actually did something - using a lower threshold\n    assert np.any(np.abs(u[1:-1,1:-1]) > 1e-6), \"No interior flow developed\""}
{"id": "c288150522e3cbfd", "name": "log", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\logging.py", "quality": 102, "cfd_tags": ["residual"], "parameters": ["self", "t", "step", "u_res", "v_res", "cont_res"], "complexity": 8, "length": 28, "snippet": "    def log(self, t, step, u_res, v_res, cont_res):\n        \"\"\"\n        Alternative log method for simpler residual logging.\n        \n        Parameters:\n        -----------\n        t : float\n            Current simulation time\n        step : int\n            Current step number\n        u_res, v_res, cont_res : float\n            Residuals for u, v velocities and continuity\n        \"\"\"\n        percent = t / self.T * 100\n        \n        log_line = (\n            f\"Progress: {percent:6.2f}% | Step: {step:6d}/{self.nt} | \"\n            f\"Time: {t:8.4f}s | \"\n            f\"u_res: {u_res:8.2e} | \"\n            f\"v_res: {v_res:8.2e} | \"\n            f\"cont_res: {cont_res:8.2e}\"\n        )\n        \n        # Pad with spaces to clear the rest of the line and use carriage return\n        padding = ' ' * max(0, self.last_len - len(log_line))\n        sys.stdout.write(f\"\\r{log_line}{padding}\")\n        sys.stdout.flush()\n        self.last_len = len(log_line)"}
{"id": "fb494a5519f37458", "name": "run_simulation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\visualize_flow.py", "quality": 101.5, "cfd_tags": ["pressure", "residual", "timestep", "velocity"], "parameters": ["Re", "N", "T"], "complexity": 10, "length": 73, "snippet": "def run_simulation(Re, N=41, T=5.0):\n    \"\"\"\n    Run a simulation for the specified Reynolds number\n    \n    Parameters:\n    -----------\n    Re : float\n        Reynolds number\n    N : int\n        Grid size\n    T : float\n        Simulation time\n    \n    Returns:\n    --------\n    u, v, p : numpy arrays\n        Velocity and pressure fields\n    grid : Grid\n        Grid object\n    residuals : dict\n        Dictionary containing residual histories\n    computation_time : float\n        Total computation time in seconds\n    \"\"\"\n    # Set up grid\n    L = 1.0\n    grid = Grid(N, L)\n    dx, dy = grid.dx, grid.dy\n    \n    # Set initial time step\n    dt_init = 0.001\n    \n    # Run simulation with timing\n    start_time = time.time()\n    print(f\"Processing Re={Re}...\")\n    \n    # Use CFL-based adaptive time stepping for stability\n    if Re <= 100:\n        cfl_target = 0.5\n        max_dt = 0.0025\n    elif Re <= 400:\n        cfl_target = 0.5\n        max_dt = 0.001\n    else:\n        cfl_target = 0.5\n        max_dt = 0.0005\n    \n    # Run the simulation\n    u, v, p, residuals = solve_lid_driven_cavity(\n        N=N,\n        dx=dx,\n        dy=dy,\n        Re=Re,\n        dt=dt_init,\n        T=T,\n        use_cfl=True,\n        cfl_target=cfl_target\n    )\n    \n    # Calculate computation time\n    computation_time = time.time() - start_time\n    \n    # Count timesteps\n    n_steps = len(residuals['u_res'])\n    \n    print(f\"Simulation at Re={Re} complete. \")\n    print(f\"Total time steps: {n_steps}\")\n    print(f\"Simulation time: {T} seconds\")\n    print(f\"Average computational time per timestep: {computation_time/n_steps:.4f} seconds\")\n    print(f\"Overall computation time: {computation_time:.2f} seconds\")\n    print()\n    \n    return u, v, p, grid, residuals, computation_time"}
{"id": "c3d7c8e20c662e20", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_ (1).py", "quality": 100, "cfd_tags": ["pressure", "velocity"], "parameters": ["u", "v", "p", "grid"], "complexity": 1, "length": 23, "snippet": "def plot_results(u, v, p, grid):\n    plt.style.use('default')\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.title('Velocity Streamlines')\n    plt.xlabel('x'); plt.ylabel('y')\n    velocity_mag = np.sqrt(u**2 + v**2)\n    plt.streamplot(grid.X_cc, grid.Y_cc, u, v, density=1.5, color=velocity_mag, cmap='viridis')\n    plt.colorbar(label='Velocity Magnitude')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.subplot(1, 2, 2)\n    plt.title('Pressure Contours')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.contourf(grid.X_cc, grid.Y_cc, p, levels=50, cmap='viridis')\n    plt.colorbar(label='Pressure')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.tight_layout()\n    plt.show()"}
{"id": "3fcd6fdb433751c3", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_.py", "quality": 100, "cfd_tags": ["pressure", "velocity"], "parameters": ["u", "v", "p", "grid"], "complexity": 1, "length": 23, "snippet": "def plot_results(u, v, p, grid):\n    plt.style.use('default')\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.title('Velocity Streamlines')\n    plt.xlabel('x'); plt.ylabel('y')\n    velocity_mag = np.sqrt(u**2 + v**2)\n    plt.streamplot(grid.X_cc, grid.Y_cc, u, v, density=1.5, color=velocity_mag, cmap='viridis')\n    plt.colorbar(label='Velocity Magnitude')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.subplot(1, 2, 2)\n    plt.title('Pressure Contours')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.contourf(grid.X_cc, grid.Y_cc, p, levels=50, cmap='viridis')\n    plt.colorbar(label='Pressure')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.tight_layout()\n    plt.show()"}
{"id": "0529a7b802093774", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 100, "cfd_tags": ["pressure", "velocity"], "parameters": ["u", "v", "p", "grid"], "complexity": 1, "length": 23, "snippet": "def plot_results(u, v, p, grid):\n    plt.style.use('default')\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.title('Velocity Streamlines')\n    plt.xlabel('x'); plt.ylabel('y')\n    velocity_mag = np.sqrt(u**2 + v**2)\n    plt.streamplot(grid.X_cc, grid.Y_cc, u, v, density=1.5, color=velocity_mag, cmap='viridis')\n    plt.colorbar(label='Velocity Magnitude')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.subplot(1, 2, 2)\n    plt.title('Pressure Contours')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.contourf(grid.X_cc, grid.Y_cc, p, levels=50, cmap='viridis')\n    plt.colorbar(label='Pressure')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.tight_layout()\n    plt.show()"}
{"id": "b0f57ae1dde10c63", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 100, "cfd_tags": ["pressure", "velocity"], "parameters": ["u", "v", "p", "grid"], "complexity": 1, "length": 23, "snippet": "def plot_results(u, v, p, grid):\n    plt.style.use('default')\n    velocity_mag = np.sqrt(u**2 + v**2)\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.title('Velocity Streamlines')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.streamplot(grid.X_cc, grid.Y_cc, u, v, density=1.5, color=velocity_mag, cmap='viridis')\n    plt.colorbar(label='Velocity Magnitude')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.subplot(1, 2, 2)\n    plt.title('Pressure Contours')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.contourf(grid.X_cc, grid.Y_cc, p, levels=50, cmap='viridis')\n    plt.colorbar(label='Pressure')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.tight_layout()\n    plt.show()"}
{"id": "7d5aa35637c74ef8", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_.py", "quality": 100, "cfd_tags": ["pressure", "velocity"], "parameters": ["u", "v", "p", "grid"], "complexity": 1, "length": 23, "snippet": "def plot_results(u, v, p, grid):\n    plt.style.use('default')\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.title('Velocity Streamlines')\n    plt.xlabel('x'); plt.ylabel('y')\n    velocity_mag = np.sqrt(u**2 + v**2)\n    plt.streamplot(grid.X_cc, grid.Y_cc, u, v, density=1.5, color=velocity_mag, cmap='viridis')\n    plt.colorbar(label='Velocity Magnitude')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.subplot(1, 2, 2)\n    plt.title('Pressure Contours')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.contourf(grid.X_cc, grid.Y_cc, p, levels=50, cmap='viridis')\n    plt.colorbar(label='Pressure')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.tight_layout()\n    plt.show()"}
{"id": "89bc07fa9ba3af44", "name": "plot_results", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_.py", "quality": 100, "cfd_tags": ["pressure", "velocity"], "parameters": ["u", "v", "p", "grid"], "complexity": 1, "length": 23, "snippet": "def plot_results(u, v, p, grid):\n    plt.style.use('default')\n    velocity_mag = np.sqrt(u**2 + v**2)\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.title('Velocity Streamlines')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.streamplot(grid.X_cc, grid.Y_cc, u, v, density=1.5, color=velocity_mag, cmap='viridis')\n    plt.colorbar(label='Velocity Magnitude')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.subplot(1, 2, 2)\n    plt.title('Pressure Contours')\n    plt.xlabel('x'); plt.ylabel('y')\n    plt.contourf(grid.X_cc, grid.Y_cc, p, levels=50, cmap='viridis')\n    plt.colorbar(label='Pressure')\n    plt.xlim(0, grid.Lx); plt.ylim(0, grid.Ly)\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    plt.tight_layout()\n    plt.show()"}
{"id": "608c5a0dfffd322a", "name": "perform_operation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 100, "cfd_tags": [], "parameters": ["num1", "num2", "operation_type", "cosmos_limit"], "complexity": 10, "length": 24, "snippet": "def perform_operation(num1, num2, operation_type, cosmos_limit):\n    \"\"\"\n    Performs an arithmetic operation on two numbers within the finite system.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        operation_type: A string indicating the operation ('add', 'subtract', 'multiply', 'divide').\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The result of the operation, or None if the operation type is invalid.\n    \"\"\"\n    if operation_type == 'add':\n        return add_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'subtract':\n        return subtract_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'multiply':\n        return multiply_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'divide':\n        return divide_finity_numbers(num1, num2, cosmos_limit)\n    else:\n        print(f\"Error: Invalid operation type '{operation_type}'.\")\n        return None"}
{"id": "150fecda8cf377d6", "name": "perform_operation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 100, "cfd_tags": [], "parameters": ["num1", "num2", "operation_type", "cosmos_limit"], "complexity": 10, "length": 24, "snippet": "def perform_operation(num1, num2, operation_type, cosmos_limit):\n    \"\"\"\n    Performs an arithmetic operation on two numbers within the finite system.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        operation_type: A string indicating the operation ('add', 'subtract', 'multiply', 'divide').\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The result of the operation, or None if the operation type is invalid.\n    \"\"\"\n    if operation_type == 'add':\n        return add_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'subtract':\n        return subtract_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'multiply':\n        return multiply_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'divide':\n        return divide_finity_numbers(num1, num2, cosmos_limit)\n    else:\n        print(f\"Error: Invalid operation type '{operation_type}'.\")\n        return None"}
{"id": "86b3e9bf0e5f45fd", "name": "perform_operation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 100, "cfd_tags": [], "parameters": ["num1", "num2", "operation_type", "cosmos_limit"], "complexity": 10, "length": 24, "snippet": "def perform_operation(num1, num2, operation_type, cosmos_limit):\n    \"\"\"\n    Performs an arithmetic operation on two numbers within the finite system.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        operation_type: A string indicating the operation ('add', 'subtract', 'multiply', 'divide').\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The result of the operation, or None if the operation type is invalid.\n    \"\"\"\n    if operation_type == 'add':\n        return add_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'subtract':\n        return subtract_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'multiply':\n        return multiply_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'divide':\n        return divide_finity_numbers(num1, num2, cosmos_limit)\n    else:\n        print(f\"Error: Invalid operation type '{operation_type}'.\")\n        return None"}
{"id": "2654154c2dded29c", "name": "perform_operation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 100, "cfd_tags": [], "parameters": ["num1", "num2", "operation_type", "cosmos_limit"], "complexity": 10, "length": 24, "snippet": "def perform_operation(num1, num2, operation_type, cosmos_limit):\n    \"\"\"\n    Performs an arithmetic operation on two numbers within the finite system.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        operation_type: A string indicating the operation ('add', 'subtract', 'multiply', 'divide').\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The result of the operation, or None if the operation type is invalid.\n    \"\"\"\n    if operation_type == 'add':\n        return add_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'subtract':\n        return subtract_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'multiply':\n        return multiply_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'divide':\n        return divide_finity_numbers(num1, num2, cosmos_limit)\n    else:\n        print(f\"Error: Invalid operation type '{operation_type}'.\")\n        return None"}
{"id": "f225c22a1bf0a002", "name": "perform_operation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 100, "cfd_tags": [], "parameters": ["num1", "num2", "operation_type", "cosmos_limit"], "complexity": 10, "length": 24, "snippet": "def perform_operation(num1, num2, operation_type, cosmos_limit):\n    \"\"\"\n    Performs an arithmetic operation on two numbers within the finite system.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        operation_type: A string indicating the operation ('add', 'subtract', 'multiply', 'divide').\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The result of the operation, or None if the operation type is invalid.\n    \"\"\"\n    if operation_type == 'add':\n        return add_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'subtract':\n        return subtract_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'multiply':\n        return multiply_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'divide':\n        return divide_finity_numbers(num1, num2, cosmos_limit)\n    else:\n        print(f\"Error: Invalid operation type '{operation_type}'.\")\n        return None"}
{"id": "51473ec14f640588", "name": "perform_operation", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 100, "cfd_tags": [], "parameters": ["num1", "num2", "operation_type", "cosmos_limit"], "complexity": 10, "length": 24, "snippet": "def perform_operation(num1, num2, operation_type, cosmos_limit):\n    \"\"\"\n    Performs an arithmetic operation on two numbers within the finite system.\n\n    Args:\n        num1: The first number.\n        num2: The second number.\n        operation_type: A string indicating the operation ('add', 'subtract', 'multiply', 'divide').\n        cosmos_limit: The defined upper limit of the system.\n\n    Returns:\n        The result of the operation, or None if the operation type is invalid.\n    \"\"\"\n    if operation_type == 'add':\n        return add_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'subtract':\n        return subtract_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'multiply':\n        return multiply_finity_numbers(num1, num2, cosmos_limit)\n    elif operation_type == 'divide':\n        return divide_finity_numbers(num1, num2, cosmos_limit)\n    else:\n        print(f\"Error: Invalid operation type '{operation_type}'.\")\n        return None"}
{"id": "eeed8d66f103f58d", "name": "calculate_continuity_residual", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 100, "cfd_tags": ["boundary", "flux", "residual", "velocity"], "parameters": ["u_field", "v_field", "dx", "dy", "Nx", "Ny"], "complexity": 12, "length": 26, "snippet": "def calculate_continuity_residual(u_field, v_field, dx, dy, Nx, Ny):\n    \"\"\"\n    Placeholder: Calculates the continuity residual for each control volume.\n    Based on the divergence of the intermediate velocity field (u*, v*).\n    \"\"\"\n    n_cells_x = Nx - 1\n    n_cells_y = Ny - 1\n    continuity_residual = np.zeros((n_cells_y, n_cells_x))\n\n    # Placeholder loop over cells\n    for j in range(n_cells_y):\n        for i in range(n_cells_x):\n            # Placeholder for calculating mass fluxes across faces\n            # e.g., East face flux: rho * u_east_face * Area_east\n            # u_east_face is typically interpolated from u_field (e.g., u[j,i] and u[j,i+1])\n\n            mass_in = 0.0 # Placeholder\n            mass_out = 0.0 # Placeholder\n\n            continuity_residual[j, i] = mass_in - mass_out # Mass imbalance\n\n            # --- Placeholder for Boundary Condition effects on residual ---\n            # BCs influence the fluxes at the boundaries of the domain.\n            pass # Placeholder logic\n\n    return continuity_residual"}
{"id": "db35aff19b654399", "name": "calculate_continuity_residual", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\py cfd\\pycfdflow2.py", "quality": 100, "cfd_tags": ["boundary", "flux", "residual", "velocity"], "parameters": ["u_field", "v_field", "dx", "dy", "Nx", "Ny"], "complexity": 12, "length": 26, "snippet": "def calculate_continuity_residual(u_field, v_field, dx, dy, Nx, Ny):\n    \"\"\"\n    Placeholder: Calculates the continuity residual for each control volume.\n    Based on the divergence of the intermediate velocity field (u*, v*).\n    \"\"\"\n    n_cells_x = Nx - 1\n    n_cells_y = Ny - 1\n    continuity_residual = np.zeros((n_cells_y, n_cells_x))\n\n    # Placeholder loop over cells\n    for j in range(n_cells_y):\n        for i in range(n_cells_x):\n            # Placeholder for calculating mass fluxes across faces\n            # e.g., East face flux: rho * u_east_face * Area_east\n            # u_east_face is typically interpolated from u_field (e.g., u[j,i] and u[j,i+1])\n\n            mass_in = 0.0 # Placeholder\n            mass_out = 0.0 # Placeholder\n\n            continuity_residual[j, i] = mass_in - mass_out # Mass imbalance\n\n            # --- Placeholder for Boundary Condition effects on residual ---\n            # BCs influence the fluxes at the boundaries of the domain.\n            pass # Placeholder logic\n\n    return continuity_residual"}
{"id": "2de52d45c9c17239", "name": "correct_velocities", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\hybrid_solver.py", "quality": 100, "cfd_tags": ["boundary", "cfd", "pressure", "velocity"], "parameters": ["u", "v", "p", "dx", "dy", "dt"], "complexity": 12, "length": 53, "snippet": "def correct_velocities(u, v, p, dx, dy, dt):\n    \"\"\"\n    Correct velocities based on the pressure gradient to enforce continuity.\n    \n    Parameters:\n    ----------\n    u, v : ndarray\n        Velocity components\n    p : ndarray\n        Pressure field\n    dx, dy : float\n        Grid spacing\n    dt : float\n        Time step\n        \n    Returns:\n    -------\n    tuple\n        Corrected velocity components (u, v)\n    \"\"\"\n    if _HAVE_CPP_EXTENSION:\n        # Use the C++ implementation\n        return pyflow_core_cfd.correct_velocities(u, v, p, dx, dy, dt)\n    else:\n        # Fallback to a Python implementation\n        ny, nx = u.shape\n        u_corr = u.copy()\n        v_corr = v.copy()\n        \n        # Correct u-velocity\n        for i in range(1, ny-1):\n            for j in range(1, nx-1):\n                dp_dx = (p[i, j+1] - p[i, j-1]) / (2.0 * dx)\n                u_corr[i, j] = u[i, j] - dt * dp_dx\n        \n        # Correct v-velocity\n        for i in range(1, ny-1):\n            for j in range(1, nx-1):\n                dp_dy = (p[i+1, j] - p[i-1, j]) / (2.0 * dy)\n                v_corr[i, j] = v[i, j] - dt * dp_dy\n        \n        # Apply boundary conditions\n        # Bottom and top (no-slip)\n        u_corr[0, :] = 0.0\n        u_corr[-1, :] = 1.0  # Lid velocity\n        v_corr[0, :] = 0.0\n        v_corr[-1, :] = 0.0\n        \n        # Left and right (no-slip)\n        u_corr[:, 0] = u_corr[:, -1] = 0.0\n        v_corr[:, 0] = v_corr[:, -1] = 0.0\n        \n        return u_corr, v_corr"}
{"id": "87a7ce662efe2489", "name": "test_boundary_conditions_enforced", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_solver.py", "quality": 100, "cfd_tags": ["boundary", "residual"], "parameters": ["capsys"], "complexity": 4, "length": 24, "snippet": "def test_boundary_conditions_enforced(capsys):\n    N = 16\n    Re = 100.0\n    T = 0.05\n    dt = 0.005\n    dx = dy = 1.0 / (N - 1)\n    logger = LiveLogger(N, Re, dt, T)\n    with capsys.disabled():\n        u, v, p, residuals = solve_lid_driven_cavity(N, dx, dy, Re, dt, T, logger=logger)\n    \n    # Lid: top row, except corners, should be 1.0\n    assert np.allclose(u[-1,1:-1], 1.0, atol=1e-8)\n    # Bottom, left, right: should be 0\n    assert np.allclose(u[0,:], 0.0, atol=1e-8)\n    assert np.allclose(u[:,0], 0.0, atol=1e-8)\n    assert np.allclose(u[:,-1], 0.0, atol=1e-8)\n    # Corners: top-left and top-right should be 0\n    assert u[-1,0] == 0.0\n    assert u[-1,-1] == 0.0\n    # v boundaries\n    assert np.allclose(v[0,:], 0.0, atol=1e-8)\n    assert np.allclose(v[-1,:], 0.0, atol=1e-8)\n    assert np.allclose(v[:,0], 0.0, atol=1e-8)\n    assert np.allclose(v[:,-1], 0.0, atol=1e-8)"}
{"id": "bf479b6ff958dc9a", "name": "test_pressure_field_nontrivial", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_solver.py", "quality": 100, "cfd_tags": ["pressure", "residual"], "parameters": ["capsys"], "complexity": 2, "length": 12, "snippet": "def test_pressure_field_nontrivial(capsys):\n    N = 16\n    Re = 100.0\n    T = 0.05\n    dt = 0.005\n    dx = dy = 1.0 / (N - 1)\n    logger = LiveLogger(N, Re, dt, T)\n    with capsys.disabled():\n        u, v, p, residuals = solve_lid_driven_cavity(N, dx, dy, Re, dt, T, logger=logger)\n    \n    # Pressure field should not be constant\n    assert np.std(p) > 1e-6"}
{"id": "c65f330a971cb44d", "name": "build_test", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #3\\test_menu.py", "quality": 100, "cfd_tags": ["boundary", "solver"], "parameters": ["test_name"], "complexity": 5, "length": 11, "snippet": "def build_test(test_name):\n    exe = os.path.join(BUILD_DIR, test_name + ('.exe' if os.name == 'nt' else ''))\n    obj = os.path.join(BUILD_DIR, test_name + '.o')\n    src = os.path.join(TESTS_DIR, test_name + '.f90')\n    # Compile object\n    subprocess.run(['gfortran', '-O2', '-Wall', '-Wextra', '-fimplicit-none', '-std=f2008', '-c', src, '-o', obj], check=True)\n    # Link with core objects\n    core = ['parameters.o','fields.o','boundary_conditions.o','io_utils.o','solver.o']\n    core_objs = [os.path.join(BUILD_DIR, o) for o in core]\n    subprocess.run(['gfortran', '-O2', '-Wall', '-Wextra', '-fimplicit-none', '-std=f2008', '-o', exe] + core_objs + [obj], check=True)\n    return exe"}
{"id": "a3fa75c0d13fbed2", "name": "create_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_ (1).py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["cfg"], "complexity": 1, "length": 11, "snippet": "def create_grid(cfg):\n    grid = types.SimpleNamespace()\n    grid.Nx, grid.Ny = cfg['Nx'], cfg['Ny']\n    grid.Lx, grid.Ly = cfg['Lx'], cfg['Ly']\n    grid.dx, grid.dy = grid.Lx / (grid.Nx - 1), grid.Ly / (grid.Ny - 1)\n    grid.n_cells_x, grid.n_cells_y = grid.Nx - 1, grid.Ny - 1\n    grid.total_cells = grid.n_cells_x * grid.n_cells_y\n    grid.x_cc = np.linspace(grid.dx / 2, grid.Lx - grid.dx / 2, grid.n_cells_x)\n    grid.y_cc = np.linspace(grid.dy / 2, grid.Ly - grid.dy / 2, grid.n_cells_y)\n    grid.X_cc, grid.Y_cc = np.meshgrid(grid.x_cc, grid.y_cc)\n    return grid"}
{"id": "355bbd8262340e90", "name": "create_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_.py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["cfg"], "complexity": 1, "length": 11, "snippet": "def create_grid(cfg):\n    grid = types.SimpleNamespace()\n    grid.Nx, grid.Ny = cfg['Nx'], cfg['Ny']\n    grid.Lx, grid.Ly = cfg['Lx'], cfg['Ly']\n    grid.dx, grid.dy = grid.Lx / (grid.Nx - 1), grid.Ly / (grid.Ny - 1)\n    grid.n_cells_x, grid.n_cells_y = grid.Nx - 1, grid.Ny - 1\n    grid.total_cells = grid.n_cells_x * grid.n_cells_y\n    grid.x_cc = np.linspace(grid.dx / 2, grid.Lx - grid.dx / 2, grid.n_cells_x)\n    grid.y_cc = np.linspace(grid.dy / 2, grid.Ly - grid.dy / 2, grid.n_cells_y)\n    grid.X_cc, grid.Y_cc = np.meshgrid(grid.x_cc, grid.y_cc)\n    return grid"}
{"id": "42494fef7a7fe164", "name": "create_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["cfg"], "complexity": 1, "length": 11, "snippet": "def create_grid(cfg):\n    grid = types.SimpleNamespace()\n    grid.Nx, grid.Ny = cfg['Nx'], cfg['Ny']\n    grid.Lx, grid.Ly = cfg['Lx'], cfg['Ly']\n    grid.dx, grid.dy = grid.Lx / (grid.Nx - 1), grid.Ly / (grid.Ny - 1)\n    grid.n_cells_x, grid.n_cells_y = grid.Nx - 1, grid.Ny - 1\n    grid.total_cells = grid.n_cells_x * grid.n_cells_y\n    grid.x_cc = np.linspace(grid.dx / 2, grid.Lx - grid.dx / 2, grid.n_cells_x)\n    grid.y_cc = np.linspace(grid.dy / 2, grid.Ly - grid.dy / 2, grid.n_cells_y)\n    grid.X_cc, grid.Y_cc = np.meshgrid(grid.x_cc, grid.y_cc)\n    return grid"}
{"id": "22691981f17e75eb", "name": "create_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["cfg"], "complexity": 1, "length": 12, "snippet": "def create_grid(cfg):\n    grid = types.SimpleNamespace()\n    grid.Nx, grid.Ny = cfg['Nx'], cfg['Ny']\n    grid.Lx, grid.Ly = cfg['Lx'], cfg['Ly']\n    grid.dx, grid.dy = grid.Lx / (grid.Nx - 1), grid.Ly / (grid.Ny - 1)\n    grid.n_cells_x, grid.n_cells_y = grid.Nx - 1, grid.Ny - 1\n    grid.total_cells = grid.n_cells_x * grid.n_cells_y\n    grid.x_cc = np.linspace(grid.dx / 2, grid.Lx - grid.dx / 2, grid.n_cells_x)\n    grid.y_cc = np.linspace(grid.dy / 2, grid.Ly - grid.dy / 2, grid.n_cells_y)\n    grid.X_cc, grid.Y_cc = np.meshgrid(grid.x_cc, grid.y_cc)\n    print(f\"Grid created: {grid.n_cells_x}x{grid.n_cells_y} cells.\")\n    return grid"}
{"id": "ae2c264b2177ae03", "name": "calculate_continuity_residual", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_ (1).py", "quality": 98, "cfd_tags": ["residual"], "parameters": ["u_star", "v_star", "grid", "config"], "complexity": 1, "length": 9, "snippet": "def calculate_continuity_residual(u_star, v_star, grid, config):\n    rho = config['physics']['rho']\n    u_face_e = 0.5 * (u_star[:, :-1] + u_star[:, 1:])\n    u_face_w = 0.5 * (np.hstack([np.zeros((grid.n_cells_y, 1)), u_star[:, :-1]]) + u_star)\n    v_face_n = 0.5 * (v_star[:-1, :] + v_star[1:, :])\n    v_face_s = 0.5 * (np.vstack([np.zeros((1, grid.n_cells_x)), v_star[:-1, :]]) + v_star)\n\n    b_p = rho * (u_face_w - u_face_e) * grid.dy + rho * (v_face_s - v_face_n) * grid.dx\n    return b_p"}
{"id": "26d0662ef25b1ac1", "name": "create_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_.py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["cfg"], "complexity": 1, "length": 11, "snippet": "def create_grid(cfg):\n    grid = types.SimpleNamespace()\n    grid.Nx, grid.Ny = cfg['Nx'], cfg['Ny']\n    grid.Lx, grid.Ly = cfg['Lx'], cfg['Ly']\n    grid.dx, grid.dy = grid.Lx / (grid.Nx - 1), grid.Ly / (grid.Ny - 1)\n    grid.n_cells_x, grid.n_cells_y = grid.Nx - 1, grid.Ny - 1\n    grid.total_cells = grid.n_cells_x * grid.n_cells_y\n    grid.x_cc = np.linspace(grid.dx / 2, grid.Lx - grid.dx / 2, grid.n_cells_x)\n    grid.y_cc = np.linspace(grid.dy / 2, grid.Ly - grid.dy / 2, grid.n_cells_y)\n    grid.X_cc, grid.Y_cc = np.meshgrid(grid.x_cc, grid.y_cc)\n    return grid"}
{"id": "849554d1a3c80bb7", "name": "create_grid", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_.py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["cfg"], "complexity": 1, "length": 12, "snippet": "def create_grid(cfg):\n    grid = types.SimpleNamespace()\n    grid.Nx, grid.Ny = cfg['Nx'], cfg['Ny']\n    grid.Lx, grid.Ly = cfg['Lx'], cfg['Ly']\n    grid.dx, grid.dy = grid.Lx / (grid.Nx - 1), grid.Ly / (grid.Ny - 1)\n    grid.n_cells_x, grid.n_cells_y = grid.Nx - 1, grid.Ny - 1\n    grid.total_cells = grid.n_cells_x * grid.n_cells_y\n    grid.x_cc = np.linspace(grid.dx / 2, grid.Lx - grid.dx / 2, grid.n_cells_x)\n    grid.y_cc = np.linspace(grid.dy / 2, grid.Ly - grid.dy / 2, grid.n_cells_y)\n    grid.X_cc, grid.Y_cc = np.meshgrid(grid.x_cc, grid.y_cc)\n    print(f\"Grid created: {grid.n_cells_x}x{grid.n_cells_y} cells.\")\n    return grid"}
{"id": "cf39562fdcb0822c", "name": "calculate_continuity_residual", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\lid_a1_.py", "quality": 98, "cfd_tags": ["residual"], "parameters": ["u_star", "v_star", "grid", "config"], "complexity": 1, "length": 9, "snippet": "def calculate_continuity_residual(u_star, v_star, grid, config):\n    rho = config['physics']['rho']\n    u_face_e = 0.5 * (u_star[:, :-1] + u_star[:, 1:])\n    u_face_w = 0.5 * (np.hstack([np.zeros((grid.n_cells_y, 1)), u_star[:, :-1]]) + u_star)\n    v_face_n = 0.5 * (v_star[:-1, :] + v_star[1:, :])\n    v_face_s = 0.5 * (np.vstack([np.zeros((1, grid.n_cells_x)), v_star[:-1, :]]) + v_star)\n\n    b_p = rho * (u_face_w - u_face_e) * grid.dy + rho * (v_face_s - v_face_n) * grid.dx\n    return b_p"}
{"id": "51eb48edfbadffb2", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["self"], "complexity": 4, "length": 30, "snippet": "    def __init__(self):\n        # --- Physical and Conversion Constants ---\n        C_CGS = 2.99792458e10\n        G_CGS = 6.67430e-8\n        RHO_CGS_TO_GEOM = G_CGS / C_CGS**2\n        PRESS_CGS_TO_GEOM = G_CGS / C_CGS**4\n\n        # --- Base SLy4 EoS Parameters ---\n        log_rho_divs_cgs_sly4 = np.array([2.7, 7.85, 12.885, 13.185, 14.18, 14.453])\n        gamma_vals_sly4 = np.array([1.58425, 1.28733, 0.62223, 1.35692, 3.44560, 2.90803, 2.76682])\n        k_cgs_0_sly4 = 6.80110e-9\n\n        self.rho_divs_geom_sly4 = (10**log_rho_divs_cgs_sly4) * RHO_CGS_TO_GEOM\n        self.k_vals_geom_sly4 = np.zeros_like(gamma_vals_sly4)\n        self.k_vals_geom_sly4[0] = k_cgs_0_sly4 * PRESS_CGS_TO_GEOM / (RHO_CGS_TO_GEOM**gamma_vals_sly4[0])\n        for i in range(1, len(gamma_vals_sly4)):\n            p_boundary = self.k_vals_geom_sly4[i-1] * self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i-1]\n            self.k_vals_geom_sly4[i] = p_boundary / (self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i])\n        self.gamma_vals_sly4 = gamma_vals_sly4\n\n        # --- Finitude EoS Parameters ---\n        self.GAMMA_FINITUDE = 3.5\n        TRANSITION_DENSITY_CGS = 5.0e15\n        self.TRANSITION_DENSITY_GEOM = TRANSITION_DENSITY_CGS * RHO_CGS_TO_GEOM\n        P_AT_TRANSITION = self._sly4_eos_only(self.TRANSITION_DENSITY_GEOM)\n        self.K_FINITUDE_GEOM = P_AT_TRANSITION / (self.TRANSITION_DENSITY_GEOM**self.GAMMA_FINITUDE)\n\n        # --- Blending Function Parameters ---\n        TRANSITION_WIDTH_CGS = 2.0e15\n        self.TRANSITION_WIDTH_GEOM = TRANSITION_WIDTH_CGS * RHO_CGS_TO_GEOM"}
{"id": "946b85769603908e", "name": "test_eos_values", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["self"], "complexity": 1, "length": 30, "snippet": "    def test_eos_values(self):\n        # Test Case 1: Low Density (Pure SLy4 regime)\n        rho_cgs_low = 2.51188643150958e+14\n        rho_geom_low = rho_cgs_low * self.RHO_CGS_TO_GEOM\n        p_low, e_low = self.eos_module.get_eos(rho_geom_low)\n        # Known-good values from original Test 05c run\n        expected_p_low = 2.06283898e-05\n        expected_e_low = 2.00030635e-04\n        np.testing.assert_allclose(p_low, expected_p_low, rtol=1e-9, err_msg=\"Pressure mismatch at low density\")\n        np.testing.assert_allclose(e_low, expected_e_low, rtol=1e-9, err_msg=\"Energy density mismatch at low density\")\n\n        # Test Case 2: Transition Density\n        rho_cgs_mid = 5.0e15\n        rho_geom_mid = rho_cgs_mid * self.RHO_CGS_TO_GEOM\n        p_mid, e_mid = self.eos_module.get_eos(rho_geom_mid)\n        # Known-good values\n        expected_p_mid = 0.00015504\n        expected_e_mid = 0.00392398\n        np.testing.assert_allclose(p_mid, expected_p_mid, rtol=1e-6, err_msg=\"Pressure mismatch at transition density\")\n        np.testing.assert_allclose(e_mid, expected_e_mid, rtol=1e-6, err_msg=\"Energy density mismatch at transition density\")\n\n        # Test Case 3: High Density (Pure Finitude regime)\n        rho_cgs_high = 3.16227766016838e+16\n        rho_geom_high = rho_cgs_high * self.RHO_CGS_TO_GEOM\n        p_high, e_high = self.eos_module.get_eos(rho_geom_high)\n        # Known-good values\n        expected_p_high = 0.0102657\n        expected_e_high = 0.0275816\n        np.testing.assert_allclose(p_high, expected_p_high, rtol=1e-6, err_msg=\"Pressure mismatch at high density\")\n        np.testing.assert_allclose(e_high, expected_e_high, rtol=1e-6, err_msg=\"Energy density mismatch at high density\")"}
{"id": "18decc2a28706a03", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\cpsail_finitude_14.py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["self"], "complexity": 4, "length": 30, "snippet": "    def __init__(self):\n        # --- Physical and Conversion Constants ---\n        C_CGS = 2.99792458e10\n        G_CGS = 6.67430e-8\n        RHO_CGS_TO_GEOM = G_CGS / C_CGS**2\n        PRESS_CGS_TO_GEOM = G_CGS / C_CGS**4\n\n        # --- Base SLy4 EoS Parameters ---\n        log_rho_divs_cgs_sly4 = np.array([2.7, 7.85, 12.885, 13.185, 14.18, 14.453])\n        gamma_vals_sly4 = np.array([1.58425, 1.28733, 0.62223, 1.35692, 3.44560, 2.90803, 2.76682])\n        k_cgs_0_sly4 = 6.80110e-9\n\n        self.rho_divs_geom_sly4 = (10**log_rho_divs_cgs_sly4) * RHO_CGS_TO_GEOM\n        self.k_vals_geom_sly4 = np.zeros_like(gamma_vals_sly4)\n        self.k_vals_geom_sly4[0] = k_cgs_0_sly4 * PRESS_CGS_TO_GEOM / (RHO_CGS_TO_GEOM**gamma_vals_sly4[0])\n        for i in range(1, len(gamma_vals_sly4)):\n            p_boundary = self.k_vals_geom_sly4[i-1] * self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i-1]\n            self.k_vals_geom_sly4[i] = p_boundary / (self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i])\n        self.gamma_vals_sly4 = gamma_vals_sly4\n\n        # --- Finitude EoS Parameters ---\n        self.GAMMA_FINITUDE = 3.5\n        TRANSITION_DENSITY_CGS = 5.0e15\n        self.TRANSITION_DENSITY_GEOM = TRANSITION_DENSITY_CGS * RHO_CGS_TO_GEOM\n        P_AT_TRANSITION = self._sly4_eos_only(self.TRANSITION_DENSITY_GEOM)\n        self.K_FINITUDE_GEOM = P_AT_TRANSITION / (self.TRANSITION_DENSITY_GEOM**self.GAMMA_FINITUDE)\n\n        # --- Blending Function Parameters ---\n        TRANSITION_WIDTH_CGS = 2.0e15\n        self.TRANSITION_WIDTH_GEOM = TRANSITION_WIDTH_CGS * RHO_CGS_TO_GEOM"}
{"id": "d892ecaef1b66a1d", "name": "test_eos_values", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\cpsail_finitude_14.py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["self"], "complexity": 1, "length": 30, "snippet": "    def test_eos_values(self):\n        # Test Case 1: Low Density (Pure SLy4 regime)\n        rho_cgs_low = 2.51188643150958e+14\n        rho_geom_low = rho_cgs_low * self.RHO_CGS_TO_GEOM\n        p_low, e_low = self.eos_module.get_eos(rho_geom_low)\n        # Known-good values from original Test 05c run\n        expected_p_low = 2.06283898e-05\n        expected_e_low = 2.00030635e-04\n        np.testing.assert_allclose(p_low, expected_p_low, rtol=1e-9, err_msg=\"Pressure mismatch at low density\")\n        np.testing.assert_allclose(e_low, expected_e_low, rtol=1e-9, err_msg=\"Energy density mismatch at low density\")\n\n        # Test Case 2: Transition Density\n        rho_cgs_mid = 5.0e15\n        rho_geom_mid = rho_cgs_mid * self.RHO_CGS_TO_GEOM\n        p_mid, e_mid = self.eos_module.get_eos(rho_geom_mid)\n        # Known-good values\n        expected_p_mid = 0.00015504\n        expected_e_mid = 0.00392398\n        np.testing.assert_allclose(p_mid, expected_p_mid, rtol=1e-6, err_msg=\"Pressure mismatch at transition density\")\n        np.testing.assert_allclose(e_mid, expected_e_mid, rtol=1e-6, err_msg=\"Energy density mismatch at transition density\")\n\n        # Test Case 3: High Density (Pure Finitude regime)\n        rho_cgs_high = 3.16227766016838e+16\n        rho_geom_high = rho_cgs_high * self.RHO_CGS_TO_GEOM\n        p_high, e_high = self.eos_module.get_eos(rho_geom_high)\n        # Known-good values\n        expected_p_high = 0.0102657\n        expected_e_high = 0.0275816\n        np.testing.assert_allclose(p_high, expected_p_high, rtol=1e-6, err_msg=\"Pressure mismatch at high density\")\n        np.testing.assert_allclose(e_high, expected_e_high, rtol=1e-6, err_msg=\"Energy density mismatch at high density\")"}
{"id": "1f3b1e6575086813", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12 (1).py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["self"], "complexity": 4, "length": 30, "snippet": "    def __init__(self):\n        # --- Physical and Conversion Constants ---\n        C_CGS = 2.99792458e10\n        G_CGS = 6.67430e-8\n        RHO_CGS_TO_GEOM = G_CGS / C_CGS**2\n        PRESS_CGS_TO_GEOM = G_CGS / C_CGS**4\n\n        # --- Base SLy4 EoS Parameters ---\n        log_rho_divs_cgs_sly4 = np.array([2.7, 7.85, 12.885, 13.185, 14.18, 14.453])\n        gamma_vals_sly4 = np.array([1.58425, 1.28733, 0.62223, 1.35692, 3.44560, 2.90803, 2.76682])\n        k_cgs_0_sly4 = 6.80110e-9\n\n        self.rho_divs_geom_sly4 = (10**log_rho_divs_cgs_sly4) * RHO_CGS_TO_GEOM\n        self.k_vals_geom_sly4 = np.zeros_like(gamma_vals_sly4)\n        self.k_vals_geom_sly4[0] = k_cgs_0_sly4 * PRESS_CGS_TO_GEOM / (RHO_CGS_TO_GEOM**gamma_vals_sly4[0])\n        for i in range(1, len(gamma_vals_sly4)):\n            p_boundary = self.k_vals_geom_sly4[i-1] * self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i-1]\n            self.k_vals_geom_sly4[i] = p_boundary / (self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i])\n        self.gamma_vals_sly4 = gamma_vals_sly4\n\n        # --- Finitude EoS Parameters ---\n        self.GAMMA_FINITUDE = 3.5\n        TRANSITION_DENSITY_CGS = 5.0e15\n        self.TRANSITION_DENSITY_GEOM = TRANSITION_DENSITY_CGS * RHO_CGS_TO_GEOM\n        P_AT_TRANSITION = self._sly4_eos_only(self.TRANSITION_DENSITY_GEOM)\n        self.K_FINITUDE_GEOM = P_AT_TRANSITION / (self.TRANSITION_DENSITY_GEOM**self.GAMMA_FINITUDE)\n\n        # --- Blending Function Parameters ---\n        TRANSITION_WIDTH_CGS = 2.0e15\n        self.TRANSITION_WIDTH_GEOM = TRANSITION_WIDTH_CGS * RHO_CGS_TO_GEOM"}
{"id": "5b73420c9231ea9f", "name": "test_eos_values", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12 (1).py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["self"], "complexity": 1, "length": 30, "snippet": "    def test_eos_values(self):\n        # Test Case 1: Low Density (Pure SLy4 regime)\n        rho_cgs_low = 2.51188643150958e+14\n        rho_geom_low = rho_cgs_low * self.RHO_CGS_TO_GEOM\n        p_low, e_low = self.eos_module.get_eos(rho_geom_low)\n        # Known-good values from original Test 05c run\n        expected_p_low = 2.06283898e-05\n        expected_e_low = 2.00030635e-04\n        np.testing.assert_allclose(p_low, expected_p_low, rtol=1e-9, err_msg=\"Pressure mismatch at low density\")\n        np.testing.assert_allclose(e_low, expected_e_low, rtol=1e-9, err_msg=\"Energy density mismatch at low density\")\n\n        # Test Case 2: Transition Density\n        rho_cgs_mid = 5.0e15\n        rho_geom_mid = rho_cgs_mid * self.RHO_CGS_TO_GEOM\n        p_mid, e_mid = self.eos_module.get_eos(rho_geom_mid)\n        # Known-good values\n        expected_p_mid = 0.00015504\n        expected_e_mid = 0.00392398\n        np.testing.assert_allclose(p_mid, expected_p_mid, rtol=1e-6, err_msg=\"Pressure mismatch at transition density\")\n        np.testing.assert_allclose(e_mid, expected_e_mid, rtol=1e-6, err_msg=\"Energy density mismatch at transition density\")\n\n        # Test Case 3: High Density (Pure Finitude regime)\n        rho_cgs_high = 3.16227766016838e+16\n        rho_geom_high = rho_cgs_high * self.RHO_CGS_TO_GEOM\n        p_high, e_high = self.eos_module.get_eos(rho_geom_high)\n        # Known-good values\n        expected_p_high = 0.0102657\n        expected_e_high = 0.0275816\n        np.testing.assert_allclose(p_high, expected_p_high, rtol=1e-6, err_msg=\"Pressure mismatch at high density\")\n        np.testing.assert_allclose(e_high, expected_e_high, rtol=1e-6, err_msg=\"Energy density mismatch at high density\")"}
{"id": "e1d49818af3dfe3b", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12.py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["self"], "complexity": 4, "length": 30, "snippet": "    def __init__(self):\n        # --- Physical and Conversion Constants ---\n        C_CGS = 2.99792458e10\n        G_CGS = 6.67430e-8\n        RHO_CGS_TO_GEOM = G_CGS / C_CGS**2\n        PRESS_CGS_TO_GEOM = G_CGS / C_CGS**4\n\n        # --- Base SLy4 EoS Parameters ---\n        log_rho_divs_cgs_sly4 = np.array([2.7, 7.85, 12.885, 13.185, 14.18, 14.453])\n        gamma_vals_sly4 = np.array([1.58425, 1.28733, 0.62223, 1.35692, 3.44560, 2.90803, 2.76682])\n        k_cgs_0_sly4 = 6.80110e-9\n\n        self.rho_divs_geom_sly4 = (10**log_rho_divs_cgs_sly4) * RHO_CGS_TO_GEOM\n        self.k_vals_geom_sly4 = np.zeros_like(gamma_vals_sly4)\n        self.k_vals_geom_sly4[0] = k_cgs_0_sly4 * PRESS_CGS_TO_GEOM / (RHO_CGS_TO_GEOM**gamma_vals_sly4[0])\n        for i in range(1, len(gamma_vals_sly4)):\n            p_boundary = self.k_vals_geom_sly4[i-1] * self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i-1]\n            self.k_vals_geom_sly4[i] = p_boundary / (self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i])\n        self.gamma_vals_sly4 = gamma_vals_sly4\n\n        # --- Finitude EoS Parameters ---\n        self.GAMMA_FINITUDE = 3.5\n        TRANSITION_DENSITY_CGS = 5.0e15\n        self.TRANSITION_DENSITY_GEOM = TRANSITION_DENSITY_CGS * RHO_CGS_TO_GEOM\n        P_AT_TRANSITION = self._sly4_eos_only(self.TRANSITION_DENSITY_GEOM)\n        self.K_FINITUDE_GEOM = P_AT_TRANSITION / (self.TRANSITION_DENSITY_GEOM**self.GAMMA_FINITUDE)\n\n        # --- Blending Function Parameters ---\n        TRANSITION_WIDTH_CGS = 2.0e15\n        self.TRANSITION_WIDTH_GEOM = TRANSITION_WIDTH_CGS * RHO_CGS_TO_GEOM"}
{"id": "17fb45df732fa611", "name": "test_eos_values", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\finitude_language_12.py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["self"], "complexity": 1, "length": 30, "snippet": "    def test_eos_values(self):\n        # Test Case 1: Low Density (Pure SLy4 regime)\n        rho_cgs_low = 2.51188643150958e+14\n        rho_geom_low = rho_cgs_low * self.RHO_CGS_TO_GEOM\n        p_low, e_low = self.eos_module.get_eos(rho_geom_low)\n        # Known-good values from original Test 05c run\n        expected_p_low = 2.06283898e-05\n        expected_e_low = 2.00030635e-04\n        np.testing.assert_allclose(p_low, expected_p_low, rtol=1e-9, err_msg=\"Pressure mismatch at low density\")\n        np.testing.assert_allclose(e_low, expected_e_low, rtol=1e-9, err_msg=\"Energy density mismatch at low density\")\n\n        # Test Case 2: Transition Density\n        rho_cgs_mid = 5.0e15\n        rho_geom_mid = rho_cgs_mid * self.RHO_CGS_TO_GEOM\n        p_mid, e_mid = self.eos_module.get_eos(rho_geom_mid)\n        # Known-good values\n        expected_p_mid = 0.00015504\n        expected_e_mid = 0.00392398\n        np.testing.assert_allclose(p_mid, expected_p_mid, rtol=1e-6, err_msg=\"Pressure mismatch at transition density\")\n        np.testing.assert_allclose(e_mid, expected_e_mid, rtol=1e-6, err_msg=\"Energy density mismatch at transition density\")\n\n        # Test Case 3: High Density (Pure Finitude regime)\n        rho_cgs_high = 3.16227766016838e+16\n        rho_geom_high = rho_cgs_high * self.RHO_CGS_TO_GEOM\n        p_high, e_high = self.eos_module.get_eos(rho_geom_high)\n        # Known-good values\n        expected_p_high = 0.0102657\n        expected_e_high = 0.0275816\n        np.testing.assert_allclose(p_high, expected_p_high, rtol=1e-6, err_msg=\"Pressure mismatch at high density\")\n        np.testing.assert_allclose(e_high, expected_e_high, rtol=1e-6, err_msg=\"Energy density mismatch at high density\")"}
{"id": "ea5bede3802ce9fc", "name": "get_scale", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1 (1).py", "quality": 98, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 11, "length": 27, "snippet": "def get_scale(number, scale_ranges):\n    \"\"\"Determines the scale of a given number based on defined ranges.\"\"\"\n    if number is None:\n        return None, None\n\n    # Handle numbers strictly greater than cosmos_limit first\n    if number > cosmos_limit:\n        # print(f\"Debug: Number {number} > cosmos_limit {cosmos_limit}, returning Out of bounds\") # Debug print\n        return \"Out of bounds\", None\n\n    # Sort scale ranges by the lower bound to ensure correct evaluation\n    sorted_scales = sorted(scale_ranges.items(), key=lambda item: item[1][0])\n\n    for scale, (lower, upper) in sorted_scales:\n        if scale == \"Cosmos\":\n             # The upper bound is inclusive for the Cosmos limit\n             if lower <= number <= upper:\n                 # print(f\"Debug: Number {number} is in Cosmos scale {lower} to {upper}\") # Debug print\n                 return scale, (lower, upper)\n        else:\n             # For all other scales, the upper bound is inclusive\n             if lower <= number <= upper:\n                 # print(f\"Debug: Number {number} is in {scale} scale {lower} to {upper}\") # Debug print\n                 return scale, (lower, upper)\n\n    # print(f\"Debug: Number {number} did not fit into any defined scale range <= cosmos_limit\") # Debug print\n    return None, None"}
{"id": "d764f2febfaf2534", "name": "get_scale", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_cryptic_framework_v1.py", "quality": 98, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 11, "length": 27, "snippet": "def get_scale(number, scale_ranges):\n    \"\"\"Determines the scale of a given number based on defined ranges.\"\"\"\n    if number is None:\n        return None, None\n\n    # Handle numbers strictly greater than cosmos_limit first\n    if number > cosmos_limit:\n        # print(f\"Debug: Number {number} > cosmos_limit {cosmos_limit}, returning Out of bounds\") # Debug print\n        return \"Out of bounds\", None\n\n    # Sort scale ranges by the lower bound to ensure correct evaluation\n    sorted_scales = sorted(scale_ranges.items(), key=lambda item: item[1][0])\n\n    for scale, (lower, upper) in sorted_scales:\n        if scale == \"Cosmos\":\n             # The upper bound is inclusive for the Cosmos limit\n             if lower <= number <= upper:\n                 # print(f\"Debug: Number {number} is in Cosmos scale {lower} to {upper}\") # Debug print\n                 return scale, (lower, upper)\n        else:\n             # For all other scales, the upper bound is inclusive\n             if lower <= number <= upper:\n                 # print(f\"Debug: Number {number} is in {scale} scale {lower} to {upper}\") # Debug print\n                 return scale, (lower, upper)\n\n    # print(f\"Debug: Number {number} did not fit into any defined scale range <= cosmos_limit\") # Debug print\n    return None, None"}
{"id": "7b23fc61f058334b", "name": "get_scale", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\the_finity_framework_v1.py", "quality": 98, "cfd_tags": [], "parameters": ["number", "scale_ranges"], "complexity": 11, "length": 27, "snippet": "def get_scale(number, scale_ranges):\n    \"\"\"Determines the scale of a given number based on defined ranges.\"\"\"\n    if number is None:\n        return None, None\n\n    # Handle numbers strictly greater than cosmos_limit first\n    if number > cosmos_limit:\n        # print(f\"Debug: Number {number} > cosmos_limit {cosmos_limit}, returning Out of bounds\") # Debug print\n        return \"Out of bounds\", None\n\n    # Sort scale ranges by the lower bound to ensure correct evaluation\n    sorted_scales = sorted(scale_ranges.items(), key=lambda item: item[1][0])\n\n    for scale, (lower, upper) in sorted_scales:\n        if scale == \"Cosmos\":\n             # The upper bound is inclusive for the Cosmos limit\n             if lower <= number <= upper:\n                 # print(f\"Debug: Number {number} is in Cosmos scale {lower} to {upper}\") # Debug print\n                 return scale, (lower, upper)\n        else:\n             # For all other scales, the upper bound is inclusive\n             if lower <= number <= upper:\n                 # print(f\"Debug: Number {number} is in {scale} scale {lower} to {upper}\") # Debug print\n                 return scale, (lower, upper)\n\n    # print(f\"Debug: Number {number} did not fit into any defined scale range <= cosmos_limit\") # Debug print\n    return None, None"}
{"id": "ae7d6a8802935f00", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12 (1).py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["self"], "complexity": 4, "length": 30, "snippet": "    def __init__(self):\n        # --- Physical and Conversion Constants ---\n        C_CGS = 2.99792458e10\n        G_CGS = 6.67430e-8\n        RHO_CGS_TO_GEOM = G_CGS / C_CGS**2\n        PRESS_CGS_TO_GEOM = G_CGS / C_CGS**4\n\n        # --- Base SLy4 EoS Parameters ---\n        log_rho_divs_cgs_sly4 = np.array([2.7, 7.85, 12.885, 13.185, 14.18, 14.453])\n        gamma_vals_sly4 = np.array([1.58425, 1.28733, 0.62223, 1.35692, 3.44560, 2.90803, 2.76682])\n        k_cgs_0_sly4 = 6.80110e-9\n\n        self.rho_divs_geom_sly4 = (10**log_rho_divs_cgs_sly4) * RHO_CGS_TO_GEOM\n        self.k_vals_geom_sly4 = np.zeros_like(gamma_vals_sly4)\n        self.k_vals_geom_sly4[0] = k_cgs_0_sly4 * PRESS_CGS_TO_GEOM / (RHO_CGS_TO_GEOM**gamma_vals_sly4[0])\n        for i in range(1, len(gamma_vals_sly4)):\n            p_boundary = self.k_vals_geom_sly4[i-1] * self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i-1]\n            self.k_vals_geom_sly4[i] = p_boundary / (self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i])\n        self.gamma_vals_sly4 = gamma_vals_sly4\n\n        # --- Finitude EoS Parameters ---\n        self.GAMMA_FINITUDE = 3.5\n        TRANSITION_DENSITY_CGS = 5.0e15\n        self.TRANSITION_DENSITY_GEOM = TRANSITION_DENSITY_CGS * RHO_CGS_TO_GEOM\n        P_AT_TRANSITION = self._sly4_eos_only(self.TRANSITION_DENSITY_GEOM)\n        self.K_FINITUDE_GEOM = P_AT_TRANSITION / (self.TRANSITION_DENSITY_GEOM**self.GAMMA_FINITUDE)\n\n        # --- Blending Function Parameters ---\n        TRANSITION_WIDTH_CGS = 2.0e15\n        self.TRANSITION_WIDTH_GEOM = TRANSITION_WIDTH_CGS * RHO_CGS_TO_GEOM"}
{"id": "1bcaf7f28b76bc7c", "name": "test_eos_values", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12 (1).py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["self"], "complexity": 1, "length": 30, "snippet": "    def test_eos_values(self):\n        # Test Case 1: Low Density (Pure SLy4 regime)\n        rho_cgs_low = 2.51188643150958e+14\n        rho_geom_low = rho_cgs_low * self.RHO_CGS_TO_GEOM\n        p_low, e_low = self.eos_module.get_eos(rho_geom_low)\n        # Known-good values from original Test 05c run\n        expected_p_low = 2.06283898e-05\n        expected_e_low = 2.00030635e-04\n        np.testing.assert_allclose(p_low, expected_p_low, rtol=1e-9, err_msg=\"Pressure mismatch at low density\")\n        np.testing.assert_allclose(e_low, expected_e_low, rtol=1e-9, err_msg=\"Energy density mismatch at low density\")\n\n        # Test Case 2: Transition Density\n        rho_cgs_mid = 5.0e15\n        rho_geom_mid = rho_cgs_mid * self.RHO_CGS_TO_GEOM\n        p_mid, e_mid = self.eos_module.get_eos(rho_geom_mid)\n        # Known-good values\n        expected_p_mid = 0.00015504\n        expected_e_mid = 0.00392398\n        np.testing.assert_allclose(p_mid, expected_p_mid, rtol=1e-6, err_msg=\"Pressure mismatch at transition density\")\n        np.testing.assert_allclose(e_mid, expected_e_mid, rtol=1e-6, err_msg=\"Energy density mismatch at transition density\")\n\n        # Test Case 3: High Density (Pure Finitude regime)\n        rho_cgs_high = 3.16227766016838e+16\n        rho_geom_high = rho_cgs_high * self.RHO_CGS_TO_GEOM\n        p_high, e_high = self.eos_module.get_eos(rho_geom_high)\n        # Known-good values\n        expected_p_high = 0.0102657\n        expected_e_high = 0.0275816\n        np.testing.assert_allclose(p_high, expected_p_high, rtol=1e-6, err_msg=\"Pressure mismatch at high density\")\n        np.testing.assert_allclose(e_high, expected_e_high, rtol=1e-6, err_msg=\"Energy density mismatch at high density\")"}
{"id": "b77187716dd9ba53", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12.py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["self"], "complexity": 4, "length": 30, "snippet": "    def __init__(self):\n        # --- Physical and Conversion Constants ---\n        C_CGS = 2.99792458e10\n        G_CGS = 6.67430e-8\n        RHO_CGS_TO_GEOM = G_CGS / C_CGS**2\n        PRESS_CGS_TO_GEOM = G_CGS / C_CGS**4\n\n        # --- Base SLy4 EoS Parameters ---\n        log_rho_divs_cgs_sly4 = np.array([2.7, 7.85, 12.885, 13.185, 14.18, 14.453])\n        gamma_vals_sly4 = np.array([1.58425, 1.28733, 0.62223, 1.35692, 3.44560, 2.90803, 2.76682])\n        k_cgs_0_sly4 = 6.80110e-9\n\n        self.rho_divs_geom_sly4 = (10**log_rho_divs_cgs_sly4) * RHO_CGS_TO_GEOM\n        self.k_vals_geom_sly4 = np.zeros_like(gamma_vals_sly4)\n        self.k_vals_geom_sly4[0] = k_cgs_0_sly4 * PRESS_CGS_TO_GEOM / (RHO_CGS_TO_GEOM**gamma_vals_sly4[0])\n        for i in range(1, len(gamma_vals_sly4)):\n            p_boundary = self.k_vals_geom_sly4[i-1] * self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i-1]\n            self.k_vals_geom_sly4[i] = p_boundary / (self.rho_divs_geom_sly4[i-1]**gamma_vals_sly4[i])\n        self.gamma_vals_sly4 = gamma_vals_sly4\n\n        # --- Finitude EoS Parameters ---\n        self.GAMMA_FINITUDE = 3.5\n        TRANSITION_DENSITY_CGS = 5.0e15\n        self.TRANSITION_DENSITY_GEOM = TRANSITION_DENSITY_CGS * RHO_CGS_TO_GEOM\n        P_AT_TRANSITION = self._sly4_eos_only(self.TRANSITION_DENSITY_GEOM)\n        self.K_FINITUDE_GEOM = P_AT_TRANSITION / (self.TRANSITION_DENSITY_GEOM**self.GAMMA_FINITUDE)\n\n        # --- Blending Function Parameters ---\n        TRANSITION_WIDTH_CGS = 2.0e15\n        self.TRANSITION_WIDTH_GEOM = TRANSITION_WIDTH_CGS * RHO_CGS_TO_GEOM"}
{"id": "45a3783dfd043260", "name": "test_eos_values", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\cpdail\\_12.py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["self"], "complexity": 1, "length": 30, "snippet": "    def test_eos_values(self):\n        # Test Case 1: Low Density (Pure SLy4 regime)\n        rho_cgs_low = 2.51188643150958e+14\n        rho_geom_low = rho_cgs_low * self.RHO_CGS_TO_GEOM\n        p_low, e_low = self.eos_module.get_eos(rho_geom_low)\n        # Known-good values from original Test 05c run\n        expected_p_low = 2.06283898e-05\n        expected_e_low = 2.00030635e-04\n        np.testing.assert_allclose(p_low, expected_p_low, rtol=1e-9, err_msg=\"Pressure mismatch at low density\")\n        np.testing.assert_allclose(e_low, expected_e_low, rtol=1e-9, err_msg=\"Energy density mismatch at low density\")\n\n        # Test Case 2: Transition Density\n        rho_cgs_mid = 5.0e15\n        rho_geom_mid = rho_cgs_mid * self.RHO_CGS_TO_GEOM\n        p_mid, e_mid = self.eos_module.get_eos(rho_geom_mid)\n        # Known-good values\n        expected_p_mid = 0.00015504\n        expected_e_mid = 0.00392398\n        np.testing.assert_allclose(p_mid, expected_p_mid, rtol=1e-6, err_msg=\"Pressure mismatch at transition density\")\n        np.testing.assert_allclose(e_mid, expected_e_mid, rtol=1e-6, err_msg=\"Energy density mismatch at transition density\")\n\n        # Test Case 3: High Density (Pure Finitude regime)\n        rho_cgs_high = 3.16227766016838e+16\n        rho_geom_high = rho_cgs_high * self.RHO_CGS_TO_GEOM\n        p_high, e_high = self.eos_module.get_eos(rho_geom_high)\n        # Known-good values\n        expected_p_high = 0.0102657\n        expected_e_high = 0.0275816\n        np.testing.assert_allclose(p_high, expected_p_high, rtol=1e-6, err_msg=\"Pressure mismatch at high density\")\n        np.testing.assert_allclose(e_high, expected_e_high, rtol=1e-6, err_msg=\"Energy density mismatch at high density\")"}
{"id": "5685c8bccfd84b10", "name": "get_extension_modules", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\build_utils.py", "quality": 98, "cfd_tags": ["cfd", "solver"], "parameters": [], "complexity": 2, "length": 34, "snippet": "def get_extension_modules():\n    # Get compiler flags\n    compile_flags = get_compile_flags()\n    \n    # Define the extension modules\n    extensions = [\n        # Basic utilities module\n        Extension(\n            'pyflow_core',\n            sources=['cpp/pyflow_core.cpp'],\n            include_dirs=[\n                find_pybind11_path(),\n                find_numpy_path(),\n            ],\n            language='c++',\n            extra_compile_args=compile_flags,\n        ),\n        \n        # CFD solver module\n        Extension(\n            'pyflow_core_cfd',\n            sources=['cpp/pyflow_core_cfd.cpp'],\n            include_dirs=[\n                find_pybind11_path(),\n                find_numpy_path(),\n                # Add Eigen's include path here if you use it\n                # 'cpp/vendor/eigen',\n            ],\n            language='c++',\n            extra_compile_args=compile_flags,\n        ),\n    ]\n    \n    return extensions"}
{"id": "07bb91e77a3c3ebd", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\grid.py", "quality": 98, "cfd_tags": ["mesh"], "parameters": ["self", "NPOINTS", "L"], "complexity": 4, "length": 12, "snippet": "    def __init__(self, NPOINTS: int, L: float):\n        self.NPOINTS = NPOINTS\n        self.L = L\n        self.dx = L / (NPOINTS - 1)\n        self.dy = L / (NPOINTS - 1)\n        x = np.linspace(0, L, NPOINTS, dtype=np.float64)\n        y = np.linspace(0, L, NPOINTS, dtype=np.float64)\n        self.X, self.Y = np.meshgrid(x, y)\n        \n        # Additional properties for compatibility with visualization\n        self.Nx = self.Ny = NPOINTS\n        self.Lx = self.Ly = L"}
{"id": "564f68f62f1e7b51", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\residuals.py", "quality": 98, "cfd_tags": ["residual"], "parameters": ["self"], "complexity": 1, "length": 6, "snippet": "    def __init__(self):\n        self.u_residuals = []\n        self.v_residuals = []\n        self.continuity_residuals = []\n        self.iterations = []\n        self.iteration_count = 0"}
{"id": "37b49cd4886ebaee", "name": "compute_residuals", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\pyflow\\residuals.py", "quality": 98, "cfd_tags": ["residual", "velocity"], "parameters": ["self", "u", "v", "u_prev", "v_prev", "dx", "dy"], "complexity": 11, "length": 30, "snippet": "    def compute_residuals(self, u: np.ndarray, v: np.ndarray, \n                          u_prev: np.ndarray, v_prev: np.ndarray,\n                          dx: float, dy: float) -> Tuple[float, float, float]:\n        \"\"\"\n        Compute normalized residuals for u, v, and continuity equations.\n        \n        Parameters:\n        -----------\n        u, v: Current velocity fields\n        u_prev, v_prev: Previous iteration velocity fields\n        dx, dy: Grid spacing\n        \n        Returns:\n        --------\n        u_res, v_res, cont_res: Residuals for u, v velocities and continuity\n        \"\"\"\n        # Momentum residuals (L2 norm of change in velocity)\n        u_res = np.sqrt(np.mean((u - u_prev)**2)) / (np.mean(np.abs(u)) + 1e-12)\n        v_res = np.sqrt(np.mean((v - v_prev)**2)) / (np.mean(np.abs(v)) + 1e-12)\n        \n        # Continuity residual (L2 norm of divergence)\n        div = np.zeros_like(u)\n        N = u.shape[0]\n        for j in range(1, N-1):\n            for i in range(1, N-1):\n                div[j, i] = (u[j, i+1] - u[j, i-1])/(2*dx) + (v[j+1, i] - v[j-1, i])/(2*dy)\n        \n        cont_res = np.sqrt(np.mean(div**2))\n        \n        return u_res, v_res, cont_res"}
{"id": "815d22a0e693118f", "name": "test_boundary_conditions_enforced", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_diagnostics.py", "quality": 98, "cfd_tags": ["boundary"], "parameters": ["capsys"], "complexity": 4, "length": 24, "snippet": "def test_boundary_conditions_enforced(capsys):\n    N = 16\n    Re = 100.0\n    T = 0.05\n    dt = 0.005\n    dx = dy = 1.0 / (N - 1)\n    logger = LiveLogger(N, Re, dt, T)\n    with capsys.disabled():\n        u, v, p = solve_lid_driven_cavity(N, dx, dy, Re, dt, T, logger=logger)\n    \n    # Lid: top row, except corners, should be 1.0\n    assert np.allclose(u[-1,1:-1], 1.0, atol=1e-8)\n    # Bottom, left, right: should be 0\n    assert np.allclose(u[0,:], 0.0, atol=1e-8)\n    assert np.allclose(u[:,0], 0.0, atol=1e-8)\n    assert np.allclose(u[:,-1], 0.0, atol=1e-8)\n    # Corners: top-left and top-right should be 0\n    assert u[-1,0] == 0.0\n    assert u[-1,-1] == 0.0\n    # v boundaries\n    assert np.allclose(v[0,:], 0.0, atol=1e-8)\n    assert np.allclose(v[-1,:], 0.0, atol=1e-8)\n    assert np.allclose(v[:,0], 0.0, atol=1e-8)\n    assert np.allclose(v[:,-1], 0.0, atol=1e-8)"}
{"id": "65f73f86b09f0290", "name": "test_pressure_field_nontrivial", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_diagnostics.py", "quality": 98, "cfd_tags": ["pressure"], "parameters": ["capsys"], "complexity": 2, "length": 12, "snippet": "def test_pressure_field_nontrivial(capsys):\n    N = 16\n    Re = 100.0\n    T = 0.05\n    dt = 0.005\n    dx = dy = 1.0 / (N - 1)\n    logger = LiveLogger(N, Re, dt, T)\n    with capsys.disabled():\n        u, v, p = solve_lid_driven_cavity(N, dx, dy, Re, dt, T, logger=logger)\n    \n    # Pressure field should not be constant\n    assert np.std(p) > 1e-6"}
{"id": "1a8b1c51dcd29ced", "name": "test_flow_develops", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #2\\pyflow_solver\\tests\\test_solver.py", "quality": 98, "cfd_tags": ["residual"], "parameters": ["capsys"], "complexity": 3, "length": 13, "snippet": "def test_flow_develops(capsys):\n    N = 16\n    Re = 100.0\n    T = 0.05\n    dt = 0.005\n    dx = dy = 1.0 / (N - 1)\n    logger = LiveLogger(N, Re, dt, T)\n    with capsys.disabled():\n        u, v, p, residuals = solve_lid_driven_cavity(N, dx, dy, Re, dt, T, logger=logger)\n    \n    # Check that the interior is not all zero (flow develops)\n    assert np.any(np.abs(u[1:-1,1:-1]) > 1e-6)\n    assert np.any(np.abs(v[1:-1,1:-1]) > 1e-6)"}
{"id": "e8128b4114ed2825", "name": "print_menu", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #3\\app.py", "quality": 98, "cfd_tags": ["cfd", "solver"], "parameters": [], "complexity": 2, "length": 8, "snippet": "def print_menu():\n    print(\"\\n==== CFD Solver Application ====\")\n    print(\"1. Build Fortran solver and tests\")\n    print(\"2. Run main solver\")\n    print(\"3. Run all tests\")\n    print(\"4. Run individual test\")\n    print(\"5. View output files\")\n    print(\"0. Exit\")"}
{"id": "72b7aa8ae5f646a9", "name": "plot_field", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\VS PY\\Solver #3\\post\\run_and_plot.py", "quality": 98, "cfd_tags": ["velocity"], "parameters": ["arr", "nx", "ny"], "complexity": 5, "length": 17, "snippet": "def plot_field(arr, nx=None, ny=None):\n    if nx is None:\n        nx = int(arr[:,0].max())\n    if ny is None:\n        ny = int(arr[:,1].max())\n    u = np.zeros((nx, ny))\n    for row in arr:\n        i, j, uu = int(row[0])-1, int(row[1])-1, row[2]\n        u[i,j] = uu\n    plt.imshow(u.T, origin='lower', cmap='viridis')\n    plt.colorbar(label='u')\n    plt.title('Lid-driven cavity u velocity (placeholder)')\n    plt.xlabel('i'); plt.ylabel('j')\n    plt.tight_layout()\n    out_png = OUTPUT_FILE.with_suffix('.png')\n    plt.savefig(out_png, dpi=150)\n    print('Saved plot to', out_png)"}
{"id": "3e583326b820a341", "name": "add_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2", "cl"], "complexity": 1, "length": 1, "snippet": "def add_finity_numbers(n1, n2, cl): return min(n1 + n2, cl)"}
{"id": "7c778dd6d4b8c9d7", "name": "subtract_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2", "cl"], "complexity": 1, "length": 1, "snippet": "def subtract_finity_numbers(n1, n2, cl): return max(n1 - n2, 0)"}
{"id": "d5244db37dc58caf", "name": "multiply_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2", "cl"], "complexity": 1, "length": 1, "snippet": "def multiply_finity_numbers(n1, n2, cl): return min(n1 * n2, cl)"}
{"id": "4ea42ed8cd084885", "name": "divide_finity_numbers", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2", "cl"], "complexity": 2, "length": 5, "snippet": "def divide_finity_numbers(n1, n2, cl):\n    if n2 == 0:\n        print(\"Warning: Division by zero. Returning cosmos_limit.\")\n        return cl\n    return min(n1 / n2, cl)"}
{"id": "f9b15422a4459a1f", "name": "add_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 1, "length": 1, "snippet": "def add_finity(n1, n2): return min(n1 + n2, cosmos_limit)"}
{"id": "df56ae15c1b6af57", "name": "sub_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 1, "length": 1, "snippet": "def sub_finity(n1, n2): return max(n1 - n2, 0)"}
{"id": "3e26b7b25aae47dd", "name": "mul_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 1, "length": 1, "snippet": "def mul_finity(n1, n2): return min(n1 * n2, cosmos_limit)"}
{"id": "b8558da627874197", "name": "div_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 2, "length": 3, "snippet": "def div_finity(n1, n2):\n    if n2 == 0: return cosmos_limit\n    return min(n1 / n2, cosmos_limit)"}
{"id": "fbea1f09b740a5f9", "name": "add_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 1, "length": 1, "snippet": "def add_finity(n1, n2): return min(n1 + n2, cosmos_limit)"}
{"id": "197a47c9f4c7e8e5", "name": "sub_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 1, "length": 1, "snippet": "def sub_finity(n1, n2): return max(n1 - n2, 0)"}
{"id": "d4e3df7f1e112e28", "name": "mul_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 1, "length": 1, "snippet": "def mul_finity(n1, n2): return min(n1 * n2, cosmos_limit)"}
{"id": "928bf6998629d9b6", "name": "div_finity", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["n1", "n2"], "complexity": 2, "length": 3, "snippet": "def div_finity(n1, n2):\n    if n2 == 0: return cosmos_limit\n    return min(n1 / n2, cosmos_limit)"}
{"id": "c67d51953093139c", "name": "_sly4_eos_only", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "rho_geom"], "complexity": 1, "length": 4, "snippet": "    def _sly4_eos_only(self, rho_geom):\n        piece = np.searchsorted(self.rho_divs_geom_sly4, rho_geom)\n        K, Gamma = self.k_vals_geom_sly4[piece], self.gamma_vals_sly4[piece]\n        return K * rho_geom**Gamma"}
{"id": "749d61ee3e34ece6", "name": "_finitude_eos_only", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "rho_geom"], "complexity": 1, "length": 2, "snippet": "    def _finitude_eos_only(self, rho_geom):\n        return self.K_FINITUDE_GEOM * rho_geom**self.GAMMA_FINITUDE"}
{"id": "39f1c5830c43941b", "name": "_blending_function", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "rho_geom"], "complexity": 1, "length": 3, "snippet": "    def _blending_function(self, rho_geom):\n        arg = (rho_geom - self.TRANSITION_DENSITY_GEOM) / self.TRANSITION_WIDTH_GEOM\n        return (np.tanh(arg) + 1) / 2.0"}
{"id": "96f0d60c906fde02", "name": "get_value", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def get_value(self): return self._value"}
{"id": "e57a33bff7004875", "name": "__str__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 4, "snippet": "    def __str__(self):\n        if self._value is None: return \"Out of bounds\"\n        name, abbr = generate_name_and_abbreviation(self._value, scale_ranges)\n        return f\"{self._value} ({name} / {abbr})\""}
{"id": "ada50b96f1cf1160", "name": "__repr__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __repr__(self): return f\"FinityNumber({self._value})\""}
{"id": "5aa848a62212ccb0", "name": "__add__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 4, "length": 3, "snippet": "    def __add__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(add_finity_numbers(self._value, other._value, cosmos_limit))"}
{"id": "983832d397a5492d", "name": "__sub__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 4, "length": 3, "snippet": "    def __sub__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(subtract_finity_numbers(self._value, other._value, cosmos_limit))"}
{"id": "30232aeb06b45687", "name": "__mul__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 4, "length": 3, "snippet": "    def __mul__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(multiply_finity_numbers(self._value, other._value, cosmos_limit))"}
{"id": "fce06bd5fe3f702d", "name": "__truediv__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 4, "length": 3, "snippet": "    def __truediv__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(divide_finity_numbers(self._value, other._value, cosmos_limit))"}
{"id": "40e7a2b523c00fbf", "name": "__lt__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 4, "length": 3, "snippet": "    def __lt__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None: return False\n        return self._value < other._value"}
{"id": "5443927d0ba21e13", "name": "__le__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 5, "length": 4, "snippet": "    def __le__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None:\n            return self._value is None and other._value is None\n        return self._value <= other._value"}
{"id": "486207c0949760db", "name": "__eq__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 5, "length": 4, "snippet": "    def __eq__(self, other):\n        if not isinstance(other, FinityNumber): return False\n        if self._value is None or other._value is None: return self._value is None and other._value is None\n        return self._value == other._value"}
{"id": "ee1eb495108b6a18", "name": "__ne__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 1, "length": 1, "snippet": "    def __ne__(self, other): return not self == other"}
{"id": "dfb15383b0a3b606", "name": "__gt__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 4, "length": 3, "snippet": "    def __gt__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None: return False\n        return self._value > other._value"}
{"id": "367cbc75e03997dc", "name": "__ge__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 5, "length": 4, "snippet": "    def __ge__(self, other):\n        if not isinstance(other, FinityNumber) or self._value is None or other._value is None:\n            return self._value is None and other._value is None\n        return self._value >= other._value"}
{"id": "b28db4a78b02dc37", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type", "value", "children"], "complexity": 2, "length": 2, "snippet": "    def __init__(self, type, value=None, children=None):\n        self.type, self.value, self.children = type, value, children if children is not None else []"}
{"id": "87e37aa4bfea2022", "name": "__repr__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 2, "snippet": "    def __repr__(self):\n        return f\"({self.type}{' '+str(self.value) if self.value is not None else ''} {self.children})\""}
{"id": "971b0afe887072e8", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "tokens"], "complexity": 1, "length": 1, "snippet": "    def __init__(self, tokens): self.tokens, self.pos = tokens, 0"}
{"id": "d95092af6595b709", "name": "current", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 1, "snippet": "    def current(self): return self.tokens[self.pos] if self.pos < len(self.tokens) else None"}
{"id": "449f59fcc1f530f6", "name": "consume", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type"], "complexity": 4, "length": 3, "snippet": "    def consume(self, type):\n        if self.current() and self.current()['type'] == type: self.pos += 1; return self.tokens[self.pos-1]\n        raise SyntaxError(f\"Expected {type}, got {self.current()['type'] if self.current() else 'EOF'}\")"}
{"id": "8dc8547f0e5227ad", "name": "parse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 4, "snippet": "    def parse(self):\n        ast = ASTNode('PROGRAM')\n        while self.current(): ast.children.append(self.parse_statement())\n        return ast"}
{"id": "6b810d630152fda4", "name": "parse_statement", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 4, "length": 10, "snippet": "    def parse_statement(self):\n        if self.current()['type'] == 'DECLARE':\n            self.consume('DECLARE'); name = self.consume('IDENTIFIER')['value']; self.consume('SEMICOLON')\n            return ASTNode('DECLARATION', value=name)\n        expr = self.parse_expression()\n        if self.current() and self.current()['type'] == 'ARROW':\n            self.consume('ARROW'); var = self.parse_operand(); self.consume('SEMICOLON')\n            return ASTNode('ASSIGNMENT', children=[var, expr])\n        self.consume('SEMICOLON')\n        return ASTNode('EXPRESSION_STATEMENT', children=[expr])"}
{"id": "7c06a0080871d789", "name": "parse_expression", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 3, "length": 6, "snippet": "    def parse_expression(self):\n        node = self.parse_operand()\n        while self.current() and self.current()['type'] in ['PLUS', 'MINUS', 'MULTIPLY', 'DIVIDE']:\n            op = self.consume(self.current()['type']); right = self.parse_operand()\n            node = ASTNode(op['type'], children=[node, right])\n        return node"}
{"id": "ae78a1924e647b94", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 2, "snippet": "    def __init__(self):\n        self.variables = {}"}
{"id": "b924cd4500f18630", "name": "interpret", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "ast"], "complexity": 3, "length": 2, "snippet": "    def interpret(self, ast):\n        for node in ast.children: self.execute(node)"}
{"id": "dba5ec022d7edf15", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "value"], "complexity": 4, "length": 3, "snippet": "    def __init__(self, value):\n        if value is None or value < 0 or value > cosmos_limit: self._value = None\n        else: self._value = float(value)"}
{"id": "e8ad0440378c1737", "name": "get_value", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def get_value(self): return self._value"}
{"id": "b7dd73459cbc341b", "name": "__str__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 4, "snippet": "    def __str__(self):\n        if self._value is None: return \"Out of bounds\"\n        name, abbr = generate_name_and_abbreviation(self._value)\n        return f\"{self._value} ({name} / {abbr})\""}
{"id": "dbbc80706852a559", "name": "__repr__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __repr__(self): return f\"FinityNumber({self._value})\""}
{"id": "1a6a3635f30765b1", "name": "__add__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __add__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(add_finity(self._value, other._value))"}
{"id": "b81a7f3d5d15cc13", "name": "__sub__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __sub__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(sub_finity(self._value, other._value))"}
{"id": "bf16ac770a1ed608", "name": "__mul__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __mul__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(mul_finity(self._value, other._value))"}
{"id": "189857881cf325d8", "name": "__truediv__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __truediv__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(div_finity(self._value, other._value))"}
{"id": "99ee2e5722203e42", "name": "__eq__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 2, "length": 1, "snippet": "    def __eq__(self, other): return self._value == other._value if isinstance(other, FinityNumber) else False"}
{"id": "e803c05cd99e627a", "name": "__lt__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 1, "snippet": "    def __lt__(self, other): return self._value < other._value if self._value is not None and other._value is not None else False"}
{"id": "13ca68e5d9b93a68", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "tokens"], "complexity": 1, "length": 1, "snippet": "    def __init__(self, tokens): self.tokens, self.pos = tokens, 0"}
{"id": "f4c670dabb9ad8bd", "name": "current", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 1, "snippet": "    def current(self): return self.tokens[self.pos] if self.pos < len(self.tokens) else None"}
{"id": "2f8218f6f68bdbd7", "name": "consume", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type"], "complexity": 4, "length": 4, "snippet": "    def consume(self, type):\n        token = self.current()\n        if token and token['type'] == type: self.pos += 1; return token\n        raise SyntaxError(f\"Expected {type}, got {token['type'] if token else 'EOF'}\")"}
{"id": "e91fb625443e713c", "name": "parse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 5, "snippet": "    def parse(self):\n        ast = {'type': 'PROGRAM', 'body': []}\n        while self.current():\n            ast['body'].append(self.parse_statement())\n        return ast"}
{"id": "adb203ba2273015d", "name": "parse_statement", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 10, "snippet": "    def parse_statement(self):\n        if self.current()['type'] == 'DECLARE':\n            self.consume('DECLARE')\n            name = self.consume('IDENTIFIER')['value']\n            self.consume('SEMICOLON')\n            return {'type': 'DECLARATION', 'name': name}\n\n        expr = self.parse_expression()\n        self.consume('SEMICOLON')\n        return expr"}
{"id": "c40df1c7d8d55eb8", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __init__(self): self.variables = {}"}
{"id": "ec3e00207c10cbe9", "name": "interpret", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "ast"], "complexity": 3, "length": 2, "snippet": "    def interpret(self, ast):\n        for node in ast['body']: self.execute(node)"}
{"id": "4fb5bb76144dc2a2", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "tokens"], "complexity": 1, "length": 1, "snippet": "    def __init__(self, tokens): self.tokens, self.pos = tokens, 0"}
{"id": "f1bd5d2d0e3befc8", "name": "current", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 1, "snippet": "    def current(self): return self.tokens[self.pos] if self.pos < len(self.tokens) else None"}
{"id": "899eefee3f4c893c", "name": "consume", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type"], "complexity": 4, "length": 4, "snippet": "    def consume(self, type):\n        token = self.current()\n        if token and token['type'] == type: self.pos += 1; return token\n        raise SyntaxError(f\"Expected {type}, got {token['type'] if token else 'EOF'}\")"}
{"id": "095747560bf3cca7", "name": "parse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 5, "snippet": "    def parse(self):\n        ast = {'type': 'PROGRAM', 'body': []}\n        while self.current():\n            ast['body'].append(self.parse_statement())\n        return ast"}
{"id": "3640cc3493f05050", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __init__(self): self.variables = {}"}
{"id": "f618fd724ef98d0f", "name": "interpret", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "ast"], "complexity": 3, "length": 2, "snippet": "    def interpret(self, ast):\n        for node in ast['body']: self.execute(node)"}
{"id": "4b85dab7d1f306ca", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "tokens"], "complexity": 1, "length": 1, "snippet": "    def __init__(self, tokens): self.tokens, self.pos = tokens, 0"}
{"id": "630fa1e78a4429ef", "name": "current", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 1, "snippet": "    def current(self): return self.tokens[self.pos] if self.pos < len(self.tokens) else None"}
{"id": "2a52f605e4effea6", "name": "consume", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type"], "complexity": 4, "length": 4, "snippet": "    def consume(self, type):\n        token = self.current()\n        if token and token['type'] == type: self.pos += 1; return token\n        raise SyntaxError(f\"Expected {type}, got {token['type'] if token else 'EOF'}\")"}
{"id": "84342f7cf6759776", "name": "parse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 5, "snippet": "    def parse(self):\n        ast = {'type': 'PROGRAM', 'body': []}\n        while self.current():\n            ast['body'].append(self.parse_statement())\n        return ast"}
{"id": "7658442a273cf81f", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __init__(self): self.variables = {}"}
{"id": "3d41f0bf3b8ad2ad", "name": "interpret", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "ast"], "complexity": 3, "length": 2, "snippet": "    def interpret(self, ast):\n        for node in ast['body']: self.execute(node)"}
{"id": "a0befc1ac88181c0", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "tokens"], "complexity": 1, "length": 1, "snippet": "    def __init__(self, tokens): self.tokens, self.pos = tokens, 0"}
{"id": "08b6df3856fc6ec7", "name": "current", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 1, "snippet": "    def current(self): return self.tokens[self.pos] if self.pos < len(self.tokens) else None"}
{"id": "09d677da3d1285a5", "name": "consume", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type"], "complexity": 4, "length": 4, "snippet": "    def consume(self, type):\n        token = self.current()\n        if token and token['type'] == type: self.pos += 1; return token\n        raise SyntaxError(f\"Expected {type}, got {token['type'] if token else 'EOF'}\")"}
{"id": "dd78006324cd7ca3", "name": "parse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 5, "snippet": "    def parse(self):\n        ast = {'type': 'PROGRAM', 'body': []}\n        while self.current():\n            ast['body'].append(self.parse_statement())\n        return ast"}
{"id": "60ecb3fb43c61947", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __init__(self): self.variables = {}"}
{"id": "8f959fa54459c301", "name": "interpret", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "ast"], "complexity": 3, "length": 2, "snippet": "    def interpret(self, ast):\n        for node in ast['body']: self.execute(node)"}
{"id": "c701e45fa5c765f9", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __init__(self): self.variables = {}"}
{"id": "d073b4cb6c5fb33f", "name": "interpret", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "ast"], "complexity": 3, "length": 2, "snippet": "    def interpret(self, ast):\n        for node in ast['body']: self.execute(node)"}
{"id": "d5ac3475abba7231", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "value"], "complexity": 4, "length": 3, "snippet": "    def __init__(self, value):\n        if value is None or value < 0 or value > cosmos_limit: self._value = None\n        else: self._value = float(value)"}
{"id": "ac849dc650be4d80", "name": "get_value", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def get_value(self): return self._value"}
{"id": "b73918ebf6d5b698", "name": "__str__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 4, "snippet": "    def __str__(self):\n        if self._value is None: return \"Out of bounds\"\n        name, abbr = generate_name_and_abbreviation(self._value)\n        return f\"{self._value} ({name} / {abbr})\""}
{"id": "17a6a3b2daeaad7a", "name": "__repr__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __repr__(self): return f\"FinityNumber({self._value})\""}
{"id": "a47e62c1a3aa737d", "name": "__add__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __add__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(add_finity(self._value, other._value))"}
{"id": "f1f73a3af37d9d47", "name": "__sub__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __sub__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(sub_finity(self._value, other._value))"}
{"id": "1d3f7eaefcdffdcc", "name": "__mul__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __mul__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(mul_finity(self._value, other._value))"}
{"id": "f0517c1c68efc4d0", "name": "__truediv__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 3, "snippet": "    def __truediv__(self, other):\n        if self._value is None or other._value is None: return FinityNumber(None)\n        return FinityNumber(div_finity(self._value, other._value))"}
{"id": "35eb034b689b52f1", "name": "__eq__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 2, "length": 1, "snippet": "    def __eq__(self, other): return self._value == other._value if isinstance(other, FinityNumber) else False"}
{"id": "21eb1f9e43905c84", "name": "__lt__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 1, "snippet": "    def __lt__(self, other): return self._value < other._value if self._value is not None and other._value is not None else False"}
{"id": "24093dc56ad644ce", "name": "__le__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 1, "snippet": "    def __le__(self, other): return self._value <= other._value if self._value is not None and other._value is not None else False"}
{"id": "b341d5400575dc16", "name": "__gt__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 1, "snippet": "    def __gt__(self, other): return self._value > other._value if self._value is not None and other._value is not None else False"}
{"id": "9118ca0532b40b7d", "name": "__ge__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 1, "snippet": "    def __ge__(self, other): return self._value >= other._value if self._value is not None and other._value is not None else False"}
{"id": "46ab6f34cfb7ac44", "name": "__ne__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "other"], "complexity": 3, "length": 1, "snippet": "    def __ne__(self, other): return self._value != other._value if self._value is not None and other._value is not None else False"}
{"id": "0e44a1a9177edf40", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "tokens"], "complexity": 1, "length": 1, "snippet": "    def __init__(self, tokens): self.tokens, self.pos = tokens, 0"}
{"id": "4082b6783b4b2c03", "name": "current", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 1, "snippet": "    def current(self): return self.tokens[self.pos] if self.pos < len(self.tokens) else None"}
{"id": "705d2580a2828939", "name": "consume", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self", "type"], "complexity": 4, "length": 4, "snippet": "    def consume(self, type):\n        token = self.current()\n        if token and token['type'] == type: self.pos += 1; return token\n        raise SyntaxError(f\"Expected {type}, got {token['type'] if token else 'EOF'}\")"}
{"id": "f07e06521418d19c", "name": "parse", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 2, "length": 5, "snippet": "    def parse(self):\n        ast = {'type': 'PROGRAM', 'body': []}\n        while self.current():\n            ast['body'].append(self.parse_statement())\n        return ast"}
{"id": "a54f60c6d4d08fa1", "name": "__init__", "file": "C:\\Users\\Elite\\Documents\\commands\\VS Studio\\pythA\\VS PY\\CFD_Engine\\src\\Frameworks and fail logs\\Colab\\_12.py", "quality": 96, "cfd_tags": [], "parameters": ["self"], "complexity": 1, "length": 1, "snippet": "    def __init__(self): self.variables = {}"}
